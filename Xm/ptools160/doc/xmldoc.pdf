%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<< /F1 2 0 R /F2 3 0 R /F3 4 0 R /F4 5 0 R >>
endobj
2 0 obj
<< /BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font >>
endobj
3 0 obj
<< /BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font >>
endobj
4 0 obj
<< /BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font >>
endobj
5 0 obj
<< /BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font >>
endobj
6 0 obj
<< /Contents 53 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
7 0 obj
<< /Contents 54 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
8 0 obj
<< /Contents 55 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
9 0 obj
<< /Contents 56 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
10 0 obj
<< /Contents 57 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
11 0 obj
<< /Contents 58 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
12 0 obj
<< /Contents 59 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
13 0 obj
<< /Contents 60 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
14 0 obj
<< /Contents 61 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
15 0 obj
<< /Contents 62 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
16 0 obj
<< /Contents 63 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
17 0 obj
<< /Contents 64 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
18 0 obj
<< /Contents 65 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
19 0 obj
<< /Contents 66 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
20 0 obj
<< /Contents 67 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
21 0 obj
<< /Contents 68 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
22 0 obj
<< /Contents 69 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
23 0 obj
<< /Contents 70 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
24 0 obj
<< /Contents 71 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
25 0 obj
<< /Contents 72 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
26 0 obj
<< /Contents 73 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
27 0 obj
<< /Contents 74 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
28 0 obj
<< /Contents 75 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
29 0 obj
<< /Contents 76 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
30 0 obj
<< /Contents 77 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
31 0 obj
<< /Contents 78 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 52 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
32 0 obj
<< /Outlines 34 0 R /PageLabels 79 0 R /PageMode /UseNone /Pages 52 0 R /Type /Catalog >>
endobj
33 0 obj
<< /Author () /CreationDate (D:20150309134758+07'00') /Creator (\(unspecified\)) /Keywords () /Producer (ReportLab PDF Library - www.reportlab.com) /Subject (\(unspecified\)) 
  /Title (XML Support: Pickling Tools 1.5.3) >>
endobj
34 0 obj
<< /Count 18 /First 35 0 R /Last 51 0 R /Type /Outlines >>
endobj
35 0 obj
<< /Dest [ 6 0 R /XYZ 62.69291 729.0236 0 ] /Next 36 0 R /Parent 34 0 R /Title (XML Support: New in PicklingTools 1.3.0) >>
endobj
36 0 obj
<< /Dest [ 6 0 R /XYZ 62.69291 253.6236 0 ] /Next 37 0 R /Parent 34 0 R /Prev 35 0 R /Title (XML, Dictionaries and Ordering) >>
endobj
37 0 obj
<< /Dest [ 8 0 R /XYZ 62.69291 675.0236 0 ] /Next 38 0 R /Parent 34 0 R /Prev 36 0 R /Title (XML, Dictionaries, and Documents) >>
endobj
38 0 obj
<< /Dest [ 8 0 R /XYZ 62.69291 238.4236 0 ] /Next 39 0 R /Parent 34 0 R /Prev 37 0 R /Title (Translating between XML and Python Dictionaries) >>
endobj
39 0 obj
<< /Dest [ 9 0 R /XYZ 62.69291 627.0236 0 ] /Next 40 0 R /Parent 34 0 R /Prev 38 0 R /Title (Python Tools: XMLDumper) >>
endobj
40 0 obj
<< /Dest [ 10 0 R /XYZ 62.69291 451.4236 0 ] /Next 41 0 R /Parent 34 0 R /Prev 39 0 R /Title (Attributes and Folding) >>
endobj
41 0 obj
<< /Dest [ 13 0 R /XYZ 62.69291 703.8236 0 ] /Next 42 0 R /Parent 34 0 R /Prev 40 0 R /Title (Python and the XMLLoader) >>
endobj
42 0 obj
<< /Dest [ 14 0 R /XYZ 62.69291 301.4236 0 ] /Next 43 0 R /Parent 34 0 R /Prev 41 0 R /Title (Attributes and the XMLLoader) >>
endobj
43 0 obj
<< /Dest [ 18 0 R /XYZ 62.69291 379.8236 0 ] /Next 44 0 R /Parent 34 0 R /Prev 42 0 R /Title (Lists and the XMLLoader/XMLDumper) >>
endobj
44 0 obj
<< /Dest [ 21 0 R /XYZ 62.69291 208.2236 0 ] /Next 45 0 R /Parent 34 0 R /Prev 43 0 R /Title (Array Disposition) >>
endobj
45 0 obj
<< /Dest [ 25 0 R /XYZ 62.69291 221.4236 0 ] /Next 46 0 R /Parent 34 0 R /Prev 44 0 R /Title (Back and Forth Between XML and Python Dictionaries) >>
endobj
46 0 obj
<< /Dest [ 26 0 R /XYZ 62.69291 201.8236 0 ] /Next 47 0 R /Parent 34 0 R /Prev 45 0 R /Title (C++ and the XMLLoader and XMLDumper) >>
endobj
47 0 obj
<< /Dest [ 27 0 R /XYZ 62.69291 399.8236 0 ] /Next 48 0 R /Parent 34 0 R /Prev 46 0 R /Title (Different Types of Keys Of Dictionaries) >>
endobj
48 0 obj
<< /Count 1 /Dest [ 28 0 R /XYZ 62.69291 765.0236 0 ] /First 49 0 R /Last 49 0 R /Next 50 0 R /Parent 34 0 R 
  /Prev 47 0 R /Title (Python C-Extension Module: New In PicklingTools 1.4.1) >>
endobj
49 0 obj
<< /Dest [ 28 0 R /XYZ 62.69291 414.8236 0 ] /Parent 48 0 R /Title (Building the pyobjconvert Python C-Extension Module) >>
endobj
50 0 obj
<< /Dest [ 31 0 R /XYZ 62.69291 729.0236 0 ] /Next 51 0 R /Parent 34 0 R /Prev 48 0 R /Title (Conclusion) >>
endobj
51 0 obj
<< /Dest [ 31 0 R /XYZ 62.69291 504.0236 0 ] /Parent 34 0 R /Prev 50 0 R /Title (Appendix A:) >>
endobj
52 0 obj
<< /Count 26 /Kids [ 6 0 R 7 0 R 8 0 R 9 0 R 10 0 R 11 0 R 12 0 R 13 0 R 14 0 R 15 0 R 
  16 0 R 17 0 R 18 0 R 19 0 R 20 0 R 21 0 R 22 0 R 23 0 R 24 0 R 25 0 R 
  26 0 R 27 0 R 28 0 R 29 0 R 30 0 R 31 0 R ] /Type /Pages >>
endobj
53 0 obj
<< /Length 5551 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 73.79488 0 Td (XML Support: Pickling Tools 1.5.3) Tj T* -73.79488 0 Td ET
Q
Q
q
1 0 0 1 62.69291 708.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (XML Support: New in PicklingTools 1.3.0) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 654.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 4.25229 Tw (The XML format and Python dictionary are fairly equivalent formats: they both allow recursive,) Tj T* 0 Tw .571318 Tw (heterogeneous structures for storing data. In many ways, XML is yet another serialization format and the) Tj T* 0 Tw 1.604597 Tw (PicklingTools embraces XML as yet another serialization \(with some limitations: DTD is not supported) Tj T* 0 Tw (\(1.3.0 has no support at all, 1.3.1 reads but ignores DTD\), although support for namespaces is coming\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 648.0236 cm
Q
q
1 0 0 1 62.69291 624.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.248555 Tw (New in PicklingTools 1.4.1 is support for a Python C-Extension module that speeds up conversion) Tj T* 0 Tw (from dict to XML by 6-10x and from XML to dict by 60-100x.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 624.0236 cm
Q
q
1 0 0 1 62.69291 594.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.165318 Tw (If you are using XML as a key-value format, then PicklingTools and XML are essentially equivalent.) Tj T* 0 Tw (Consider the tags and content of following simple XML document:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 476.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (doc) Tj (>) Tj  T* (  ) Tj (<) Tj (chapter) Tj (>) Tj (1) Tj (<) Tj (/chapter) Tj (>) Tj  T* (  ) Tj (<) Tj (chapter) Tj (>) Tj (2) Tj (<) Tj (/chapter) Tj (>) Tj  T* (  ) Tj (<) Tj (appendix) Tj (>) Tj  T* (    ) Tj (<) Tj (A) Tj (>) Tj (3.0) Tj (<) Tj (/A) Tj (>) Tj  T* (    ) Tj (<) Tj (B) Tj (>) Tj (4.0) Tj (<) Tj (/B) Tj (>) Tj  T* (  ) Tj (<) Tj (appendix) Tj (>) Tj  T* (<) Tj (doc) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 456.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (These are equivalent to the keys and values of the following Python dictionary:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 351.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = {) Tj T* (...  'chapter': [1,2],) Tj T* (...  'appendix': {) Tj T* (...      'A': 3.0,) Tj T* (...      'B': 4.0) Tj T* (...   }) Tj T* (... }) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 319.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .04332 Tw (Python dictionaries tend to be easier to manipulate in Python and C++ \(which is why they are the currency) Tj T* 0 Tw (of the PicklingTools\). but XML does have some advantages over Python Dictionaries:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 313.6236 cm
Q
q
1 0 0 1 62.69291 265.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 4.93998 Tw (XML is intrinsically ordered, whereas Python dictionaries aren't \(but can be with the) Tj T* 0 Tw (OrderedDict, see below\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (XML can represent true documents: this is XML's intrinsic advantage) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 265.6236 cm
Q
q
1 0 0 1 62.69291 232.6236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (XML, Dictionaries and Ordering) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 190.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .691654 Tw (Consider the ordering issue: in XML, the order of tags and content is preserved in an XML document as) Tj T* 0 Tw 2.199984 Tw (the tags and content always are processed in the order they appear. A Python dictionary, however,) Tj T* 0 Tw (doesn't necessarily preserve the order of keys-values. Consider:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 121.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = { 'chapter':[1,2], 'appendix':{'A':3.0, 'B':4.0} }) Tj T* (>) Tj (>) Tj (>) Tj ( for key,value in d.iteritems\(\) :) Tj T* (...   print key,) Tj T* (# Output:  chapter appendix        OR      appendix chapter) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 89.42362 cm
q
BT 1 0 0 1 0 14 Tm .659318 Tw 12 TL /F1 10 Tf 0 0 0 rg (In the example above, "chapter appendix" is JUST AS LIKELY as "appendix chapter" as output because) Tj T* 0 Tw (the Python dictionary is a ) Tj /F4 10 Tf (hash table only ) Tj /F1 10 Tf (and doesn't preserve order.) Tj T* ET
Q
Q
 
endstream
endobj
54 0 obj
<< /Length 4599 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 717.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.746457 Tw (If insertion order is really a desired feature, The OrderedDict in a new data structure Python 2.7 that) Tj T* 0 Tw 2.794651 Tw (captures this \(The equivalent in C++ is the OTab and was introduced in PicklingTools 1.2.0\). The) Tj T* 0 Tw .602765 Tw (OrderedDict is just like a Python dictionary \(in fact, it inherits from it\), but it preserves insertion order just) Tj T* 0 Tw (like XML:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 587.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 120 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from collections import OrderedDict # Available as of Python 2.7) Tj T* (>) Tj (>) Tj (>) Tj ( od = OrderedDict\([) Tj T* (...      \('chapter': [1,2]\),            # Long form of the OrderedDict) Tj T* (...      \('appendix', OrderedDict\([) Tj T* (...            \('A', 3.0\),) Tj T* (...            \('B', 4.0\),) Tj T* (...      ]\)\),) Tj T* (... ]\)) Tj T* (>) Tj (>) Tj (>) Tj ( print od['chapter']  # Just like Python dict otherwise) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 543.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .812485 Tw (Unfortunately, the default output form of OrderedDict is not as clean as the equivalent dictionary \(as the) Tj T* 0 Tw .569461 Tw (OrderedDict is currently represented as a list of tuples\), but it is still just as easy to manipulate in Python) Tj T* 0 Tw (or C++.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 501.8236 cm
q
BT 1 0 0 1 0 26 Tm .276457 Tw 12 TL /F1 10 Tf 0 0 0 rg (To be clear: ) Tj /F4 10 Tf (ordered dictionary ) Tj /F1 10 Tf (means that keys are ordered by insertion order ) Tj /F4 10 Tf (NOT by sorting order) Tj /F1 10 Tf (. You) Tj T* 0 Tw .480542 Tw (can still look up values via key \(i.e., a['key']\), but if you ITERATE through items, you iterate through them) Tj T* 0 Tw (in the order they were inserted \(or in the case of literals, the order they were listed\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 459.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.40186 Tw (Python uses the above long form to represent OrderedDicts, but we are hopeful to upgrade Python to) Tj T* 0 Tw 1.84881 Tw (make OrderedDicts a more first-class object. The notation that C++ uses is to use 'o{ }' to represent) Tj T* 0 Tw (Ordered Dictionaries. Consider, C++ can use a little letter o to indicate it's an ordered dictionary:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 354.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F3 10 Tf 12 TL (o{) Tj T* (  'chapter': [1,2],) Tj T* (  'appendix': o{        // C++ output can choose between the short) Tj T* (      'A': 4.0          // form \(this example\) or the long form) Tj T* (      'B': 3.0,         // \(above\) of OrderedDict.  Unfortunately,) Tj T* (   }                    // Python DOES NOT understand this short form.) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 310.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.201318 Tw (From Python, the OrderedDict behaves JUST like the Python dictionary, except for the fact that the) Tj T* 0 Tw 1.028221 Tw (insertion order of the keys is preserved. Thus, when you iterate \(or print\), you see the original insertion) Tj T* 0 Tw (order.:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 85.42362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 216 re B*
Q
q
BT 1 0 0 1 0 194 Tm 12 TL /F3 10 Tf 0 0 0 rg (# Python:  2.7 and above) Tj T* (>) Tj (>) Tj (>) Tj ( from collections import OrderedDict) Tj T* (>) Tj (>) Tj (>) Tj ( od = OrderedDict\([\('chapter',[1,2]\),\\) Tj T* (...                   \('appendix',OrderedDict\([\('A',3.0\),\('B',4.0\)]\)\)]\)) Tj T* (>) Tj (>) Tj (>) Tj ( for \(key, value\) in od.iteritems\(\) :) Tj T* (...    print key                    # For OrderedDict, preserves) Tj T* (...                                 # insertion order) Tj T* (chapter) Tj T* (appendix) Tj T*  T* (// C++:  PicklingTools 1.2.0 and above) Tj T* (OTab oo = OTab\("o{'chapter':[1,2], 'appendix':o{'A':4.0,'B':3.0} }"\);) Tj T* (for \(It ii\(od\); ii\(\); \) {) Tj T* (    cout ) Tj (<) Tj (<) Tj ( ii.key\(\) ) Tj (<) Tj (<) Tj ( endl;) Tj T* (}) Tj T* (// chapter) Tj T* (// appendix) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
55 0 obj
<< /Length 6014 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 729.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .387318 Tw (By using the OrderedDict, the insertion order can be preserved. Many times, however, the insertion order) Tj T* 0 Tw 1.094724 Tw (is not relevant: a user may simply care for the absence/presence of keys in the table, in which case, a) Tj T* 0 Tw (Python dictionary is fine to use.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 687.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .332093 Tw (In the case ordering is an issue, XML and Python dictionaries can be equivalent: you just have to use the) Tj T* 0 Tw 2.474147 Tw (Python OrderedDict instead of the dict: Simply choose the XML_LOAD_USE_OTABS options in the) Tj T* 0 Tw (XMLLoader when translating from XML to Python dictionaries.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 654.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (XML, Dictionaries, and Documents) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 624.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .869398 Tw (When it comes to representing documents, XML is the medium to use; This is XML's raison d'etre: tags) Tj T* 0 Tw (interspersed with content and data and attributes, Consider the very simple XML document below:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 566.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (text) Tj (>) Tj (It was the ) Tj (<) Tj (it color='green') Tj (>) Tj (best) Tj (<) Tj (/it) Tj (>) Tj ( of times,) Tj T* (      it was the ) Tj (<) Tj (it color='red') Tj (>) Tj (worst) Tj (<) Tj (/it) Tj (>) Tj ( of times.) Tj T* (<) Tj (/text) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 534.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .883876 Tw (There is no real "easy" equivalent of the above in Python dictionaries: you can make up a format which) Tj T* 0 Tw (captures all the information, but in the end, it is just a hack over XML:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 477.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( { 'text': o{ 0:'It was the ', 'it':{ 'color='green, '_':'best',) Tj T* (...              2:'of times\\n',) Tj T* (...              3:'     it was the ', 'it':'worst', 4:' of times.\\n'  } }) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 445.6236 cm
q
BT 1 0 0 1 0 14 Tm .50061 Tw 12 TL /F1 10 Tf 0 0 0 rg (The above ) Tj /F4 10 Tf (kind of ) Tj /F1 10 Tf (works as a translation between XML and Python dictionaries, but breaks down quickly) Tj T* 0 Tw (with more complex documents with attributes, nested tags or content interspersed.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 391.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .517984 Tw (If you are manipulating documents like above, don't use Python Dictionaries! Use some other format that) Tj T* 0 Tw 3.48229 Tw (is made for documents: XML, LaTeX, and REStructed Text are some alternatives for expressing) Tj T* 0 Tw .41748 Tw (documents. \(In fact, REStructured Text permeates the PicklingTools documentation because it's a simple) Tj T* 0 Tw (way to produce documentation in text, PDF and HTML\)) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 361.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.029213 Tw (For key-value pairs, we can translate directly between XML and Python dictionaries. For documents,) Tj T* 0 Tw (Python dictionaries are the wrong choice.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 355.6236 cm
Q
q
1 0 0 1 62.69291 250.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 81.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .196654 Tw (Sidebar: It can make sense to have a document embedded with the text of a Python dictionary, if you) Tj T* 0 Tw (want to keep meta-information around it:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 582 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( book = {) Tj T* (...   'book': 'A Tale of Two Cities',) Tj T* (...   'REStructuedText': 'It was the *best* of times, it was the *worst* of times',) Tj T* (...   'XML': ') Tj (<) Tj (top) Tj (>) Tj (It was the ) Tj (<) Tj (it) Tj (>) Tj (best) Tj (<) Tj (/it) Tj (>) Tj ( of time, it was the ) Tj (<) Tj (it) Tj (>) Tj (worst) Tj (<) Tj (/it) Tj (>) Tj ( of times) Tj (<) Tj (/top) Tj (>) Tj (',) Tj T* (... }) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 250.4236 cm
Q
q
1 0 0 1 62.69291 217.4236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Translating between XML and Python Dictionaries) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 187.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.473059 Tw (The PicklingTools offers tools to translate between XML and Python dictionaries \(both directions\) from) Tj T* 0 Tw (both C++ and Python. The tools assume one major maxim:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 130.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (Assumption: We are using XML to represent recursive, heterogeneous) Tj T* (key-values data structures.  In this case, we can translate back and forth) Tj T* (between XML and Python dictionaries and not lose information.) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 98.22362 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .501235 Tw (The interfaces are essentially the same in both Python and C++: there is an XMLDumper which converts) Tj T* 0 Tw 1.425318 Tw (from plain dictionaries to XML, and an XMLLoader which converts from XML to plain dictionaries. The) Tj T* 0 Tw ET
Q
Q
 
endstream
endobj
56 0 obj
<< /Length 5519 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .053988 Tw (Python tools are easier to use than the C++ tools, so we'll discuss those first, but all the interfaces for both) Tj T* 0 Tw (are basically the same.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 735.0236 cm
Q
q
1 0 0 1 62.69291 639.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F1 10 Tf 12 TL 2.176303 Tw (There was quite a bit of work when doing the XML tools in Python and C++ to make sure the) Tj T* 0 Tw 2.79436 Tw (interfaces were the same and the outputs were the same as well. There are two tests called) Tj T* 0 Tw .779069 Tw (xmldump_test.[py/cc] and xmlload_test.[py/cc] that use exactly the same output to compare against.) Tj T* 0 Tw .861751 Tw (Although there are tools in Python and C++ to deal with XML separately, the C++ and Python XML) Tj T* 0 Tw .25686 Tw (tools here have been written completely from scratch so both the Python and C++ can be maintained) Tj T* 0 Tw 2.757674 Tw (in parallel. The Python and C++ code in the XMLDumper/XMLLoader is remarkably similar for) Tj T* 0 Tw 2.990697 Tw (maintenance purposes: any changes in the Python can easily be propagated to the C++ and) Tj T* 0 Tw (vice-versa.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 639.0236 cm
Q
q
1 0 0 1 62.69291 606.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Python Tools: XMLDumper) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 576.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.962126 Tw (To convert from Python dictionaries to XML, use the XMLdumper. The online documentation is quite) Tj T* 0 Tw (good:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 530.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import xmldumper) Tj T* (>) Tj (>) Tj (>) Tj ( help\(xmldumper\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 510.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Let's start with a simple example and convert a simple dict to XML:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 429.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( example = { 'a':1, 'b':2.2, 'c':'three' }) Tj T* (>) Tj (>) Tj (>) Tj ( from xmldumper import *) Tj T* (>) Tj (>) Tj (>) Tj ( import sys    # for sys.stdout) Tj T* (>) Tj (>) Tj (>) Tj ( xd = XMLDumper\(sys.stdout\)      # dump XML to stdout) Tj T* (>) Tj (>) Tj (>) Tj ( xd.XMLDumpKeyValue\('top', example\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 409.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The output:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 376.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj (<) Tj (a) Tj (>) Tj (1) Tj (<) Tj (/a) Tj (>) Tj (<) Tj (b) Tj (>) Tj (2.2) Tj (<) Tj (/b) Tj (>) Tj (<) Tj (c) Tj (>) Tj (three) Tj (<) Tj (/c) Tj (>) Tj (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 344.4236 cm
q
BT 1 0 0 1 0 14 Tm .229431 Tw 12 TL /F1 10 Tf 0 0 0 rg (This is a tad unreadable, but sometimes you may want to compress your XML output all together. Most of) Tj T* 0 Tw (the time, though, you will probably want to use the ) Tj /F4 10 Tf (pretty print ) Tj /F1 10 Tf (version, which indents to show nesting:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 299.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( xd = XMLDumper\(sys.stdout, XML_DUMP_PRETTY\)) Tj T* (>) Tj (>) Tj (>) Tj ( xd.XMLDumpKeyValue\('top', example\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 279.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The output:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 198.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj  T* (  ) Tj (<) Tj (a) Tj (>) Tj (1) Tj (<) Tj (/a) Tj (>) Tj  T* (  ) Tj (<) Tj (b) Tj (>) Tj (2.2) Tj (<) Tj (/b) Tj (>) Tj  T* (  ) Tj (<) Tj (c) Tj (>) Tj (three) Tj (<) Tj (/c) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 154.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .634692 Tw (Notice the top-level container: this is actually an XML requirement that there be exactly one outer tag \(in) Tj T* 0 Tw .778409 Tw (this case, it is called 'top'\) containing the content. The 'top' tags surround the input table. If we want, we) Tj T* 0 Tw (can just output the value:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 120.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( xd.XMLDumpValue\(example\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 100.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The output:) Tj T* ET
Q
Q
 
endstream
endobj
57 0 obj
<< /Length 5154 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 715.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (a) Tj (>) Tj (1) Tj (<) Tj (/a) Tj (>) Tj  T* (<) Tj (b) Tj (>) Tj (2.2) Tj (<) Tj (/b) Tj (>) Tj  T* (<) Tj (c) Tj (>) Tj (three) Tj (<) Tj (/c) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 695.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This isn't legal XML by itself, but it can be part of a larger XML document composed piecewise.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 665.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.156098 Tw (There are actually a number of options for the XMLDumper: each option is ored in. For example, if we) Tj T* 0 Tw (want pretty-printed XML and strict XML \(with the header\):) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 620.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( xd = XMLDumper\(sys.stdout, XML_DUMP_PRETTY | XML_STRICT_HDR \)) Tj T* (>) Tj (>) Tj (>) Tj ( xd.XMLDumpKeyValue\('top', example\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 600.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The output:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 507.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (?xml version="1.0" encoding="UTF-8"?) Tj (>) Tj  T* (<) Tj (top) Tj (>) Tj  T* (    ) Tj (<) Tj (a) Tj (>) Tj (1) Tj (<) Tj (/a) Tj (>) Tj  T* (    ) Tj (<) Tj (b) Tj (>) Tj (2.2) Tj (<) Tj (/b) Tj (>) Tj  T* (    ) Tj (<) Tj (c) Tj (>) Tj (three) Tj (<) Tj (/c) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 463.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .89528 Tw (In this case, we output the XML header which, strictly speaking, is needed to be a standard conforming) Tj T* 0 Tw 1.091984 Tw (XML document. Currently, we only support version 1.0 and UTF-8 \(namespaces are coming in a future) Tj T* 0 Tw (release\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 430.4236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Attributes and Folding) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 400.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .999987 Tw (Attributes are a critical part of any XML document: the XML tools here use a default convention that all) Tj T* 0 Tw (keys that start with '_' are to be placed as attributes:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 355.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = { "chapter": { '_length': 100, '_pages':200, 'text': 'hello' } }) Tj T* (>) Tj (>) Tj (>) Tj ( xd.XMLDumpKeyValue\("top", a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 335.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The output:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 242.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (?xml version="1.0" encoding="UTF-8"?) Tj (>) Tj  T* (<) Tj (top) Tj (>) Tj  T* (    ) Tj (<) Tj (chapter length="100" pages="200") Tj (>) Tj  T* (        ) Tj (<) Tj (text) Tj (>) Tj (hello) Tj (<) Tj (/text) Tj (>) Tj  T* (    ) Tj (<) Tj (/chapter) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 174.0236 cm
q
BT 1 0 0 1 0 50 Tm 1.86061 Tw 12 TL /F1 10 Tf 0 0 0 rg (Notice that the keys '_length' and '_pages' got turned into attributes in the output XML because they) Tj T* 0 Tw .68061 Tw (started with '_'. This process is called ) Tj /F4 10 Tf (folding ) Tj /F1 10 Tf (and allows attributes to be represented simply in key-value) Tj T* 0 Tw 1.042485 Tw (structures. If you aren't comfortable with this, consider the following analogy: In UNIX, all files that start) Tj T* 0 Tw .300988 Tw (with a '.' are treated specially in an 'ls'. In the PicklingTools, all keys that start with '_' are treated specially) Tj T* 0 Tw (in XML processing.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 156.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You can turn this folding feature off easily enough:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 110.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 474 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( xd=XMLDumper\(sys.stdout, XML_DUMP_PRETTY | XML_DUMP_PREPEND_KEYS_AS_TAGS\)) Tj T* (>) Tj (>) Tj (>) Tj ( xd.XMLDumpKeyValue\("top", a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 90.82362 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The output:) Tj T* ET
Q
Q
 
endstream
endobj
58 0 obj
<< /Length 4214 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 667.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj  T* (    ) Tj (<) Tj (chapter) Tj (>) Tj  T* (        ) Tj (<) Tj (_length) Tj (>) Tj (100) Tj (<) Tj (/_length) Tj (>) Tj  T* (        ) Tj (<) Tj (_pages) Tj (>) Tj (200) Tj (<) Tj (/_pages) Tj (>) Tj  T* (        ) Tj (<) Tj (text) Tj (>) Tj (hello) Tj (<) Tj (/text) Tj (>) Tj  T* (    ) Tj (<) Tj (/chapter) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 635.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .95061 Tw (You can also change the prepend_char to be anything you want in the constructor to XMLDumper \(see) Tj T* 0 Tw (help\(xmldumper\)\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 593.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .15186 Tw (Many people using XML support the convention that simple data should be in attributes and only structure) Tj T* 0 Tw .89664 Tw (\(lists, dictionaries\) should be in tags. The XML_DUMP_SIMPLE_TAGS_AS_ATTRIBUTES option allows) Tj T* 0 Tw (you to do just that:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 548.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 486 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( xd=XMLDumper\(sys.stdout,XML_DUMP_PRETTY|XML_DUMP_SIMPLE_TAGS_AS_ATTRIBUTES\)) Tj T* (>) Tj (>) Tj (>) Tj ( xd.XMLDumpKeyValue\("top", a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 528.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The output:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 459.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj  T* (    ) Tj (<) Tj (chapter length="100" pages="200" text="hello") Tj (>) Tj  T* (    ) Tj (<) Tj (/chapter) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 439.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This option allows all simple data to sit in attributes.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 409.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.238735 Tw (All the options for XMLDumper are below. Some of them make more sense when coupled with the) Tj T* 0 Tw (XMLLoader \(see next section\):) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 88.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 312 re B*
Q
q
BT 1 0 0 1 0 290 Tm 12 TL /F3 10 Tf 0 0 0 rg (# Options for dictionaries -) Tj (>) Tj ( XML) Tj T* (#  If XML attributes are being folded up, then you may) Tj T* (#  want to prepend a special character to distinguish attributes) Tj T* (#  from nested tags: an underscore is the usual default.  If) Tj T* (#  you don't want a prepend char, use XML_DUMP_NO_PREPEND option) Tj T* (XML_PREPEND_CHAR = '_') Tj T*  T*  T* (# When dumping, by DEFAULT the keys that start with _ become) Tj T* (# attributes \(this is called "unfolding"\).  You may want to keep) Tj T* (# those keys as tags.  Consider:) Tj T* (#) Tj T* (#   { 'top': { '_a':'1', '_b': 2 }}) Tj T* (#) Tj T* (# DEFAULT behavior, this becomes:) Tj T* (#   ) Tj (<) Tj (top a="1" b="2") Tj (>) Tj (<) Tj (/top) Tj (>) Tj (       This moves the _names to attributes) Tj T* (#) Tj T* (# But, you may want all _ keys to stay as tags: that's the purpose of this opt) Tj T* (#   ) Tj (<) Tj (top) Tj (>) Tj ( ) Tj (<) Tj (_a) Tj (>) Tj (1) Tj (<) Tj (/_a) Tj (>) Tj ( ) Tj (<) Tj (_b) Tj (>) Tj (2) Tj (<) Tj (/b) Tj (>) Tj ( ) Tj (<) Tj (/top) Tj (>) Tj  T* (XML_DUMP_PREPEND_KEYS_AS_TAGS = 0x100) Tj T*  T* (# Any value that is simple \(i.e., contains no nested) Tj T* (# content\) will be placed in the attributes bin:) Tj T* (#  For examples:) Tj T* (#    { 'top': { 'x':'1', 'y': 2 }} -) Tj (>) Tj (  ) Tj (<) Tj (top x="1" y="2") Tj (>) Tj (<) Tj (/top) Tj (>) Tj  T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
59 0 obj
<< /Length 3213 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 79.82362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 684 re B*
Q
q
BT 1 0 0 1 0 662 Tm 12 TL /F3 10 Tf 0 0 0 rg (XML_DUMP_SIMPLE_TAGS_AS_ATTRIBUTES = 0x200) Tj T*  T* (# By default, everything dumps as strings \(without quotes\), but those things) Tj T* (# that are strings lose their "stringedness", which means) Tj T* (# they can't be "evaled" on the way back in.  This option makes) Tj T* (# Vals that are strings dump with quotes.) Tj T* (XML_DUMP_STRINGS_AS_STRINGS = 0x400) Tj T*  T* (# Like XML_DUMP_STRINGS_AS_STRINGS, but this one ONLY) Tj T* (# dumps strings with quotes if it thinks Eval will return) Tj T* (# something else.  For example in { 's': '123' } : '123' is) Tj T* (# a STRING, not a number.  When evaled with an XMLLoader) Tj T* (# with XML_LOAD_EVAL_CONTENT flag, that will become a number.) Tj T* (XML_DUMP_STRINGS_BEST_GUESS = 0x800) Tj T*  T* (# Show nesting when you dump: like "prettyPrint": basically, it shows) Tj T* (# nesting) Tj T* (XML_DUMP_PRETTY = 0x1000) Tj T*  T* (# Arrays of POD \(plain old data: ints, real, complex, etc\) can) Tj T* (# dump as huge lists:  By default they just dump with one tag) Tj T* (# and then a list of numbers.  If you set this option, they dump) Tj T* (# as a true XML list \() Tj (<) Tj (data) Tj (>) Tj (1.0/) Tj (<) Tj (data) Tj (>) Tj (<) Tj (data) Tj (>) Tj (2.0) Tj (<) Tj (/data) Tj (>) Tj ( ...\)) Tj T* (# which is very expensive, but is easier to use with other) Tj T* (# tools \(spreadsheets that support lists, etc.\).) Tj T* (XML_DUMP_POD_LIST_AS_XML_LIST = 0x2000) Tj T*  T* (# When dumping an empty tag, what do you want it to be?) Tj T* (# I.e., what is ) Tj (<) Tj (empty) Tj (>) Tj (<) Tj (/empty) Tj (>) Tj  T* (# Normally \(DEFAULT\) this is an empty dictionary 'empty': {}) Tj T* (# If you want that to be empty content, as in an empty string,) Tj T* (# set this option: 'empty': "") Tj T* (# NOTE: You don't need this option if you are using) Tj T* (# XML_DUMP_STRINGS_AS_STRINGS or XML_DUMP_STRINGS_BEST_GUESS) Tj T* (XML_DUMP_PREFER_EMPTY_STRINGS = 0x4000) Tj T*  T* (# When dumping dictionaries in order, a dict BY DEFAULT prints) Tj T* (# out the keys in sorted/alphabetic order and BY DEFAULT an OrderedDict) Tj T* (# prints out in the OrderedDict order.  The "unnatural" order) Tj T* (# for a dict is to print out in "random" order \(but probably slightly) Tj T* (# faster\).  The "unnatural" order for an OrderedDict is sorted) Tj T* (# \(because normally we use an OrderedDict because we WANTS its) Tj T* (# notion of order\)) Tj T* (XML_DUMP_UNNATURAL_ORDER = 0x8000) Tj T*  T* (# Even though illegal XML, allow element names starting with Digits:) Tj T* (# when it does see a starting digit, it turns it into an _digit) Tj T* (# so that it is still legal XML) Tj T* (XML_TAGS_ACCEPTS_DIGITS  = 0x80) Tj T*  T* (# Allows digits as starting XML tags, even though illegal XML.) Tj T* (# This preserves the number as a tag.) Tj T* (XML_DIGITS_AS_TAGS = 0x80000) Tj T*  T*  T* (# When dumping XML, the default is to NOT have the XML header) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
60 0 obj
<< /Length 4537 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 715.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (# ) Tj (<) Tj (?xml version="1.0") Tj (>) Tj (:  Specifying this option will always make that) Tj T* (# the header always precedes all content) Tj T* (XML_STRICT_HDR = 0x10000) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 682.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Python and the XMLLoader) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 640.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.484104 Tw (The XMLLoader reads XML and converts it to a Python dictionary: this is the inverse operation of the) Tj T* 0 Tw 2.204985 Tw (XMLDumper. \(Note this assumes the type of XML we are processing is key-value kind of XML, not) Tj T* 0 Tw (document XML\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 622.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The online docs are always helpful:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 577.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import xmlloader) Tj T* (>) Tj (>) Tj (>) Tj ( help\(xmlloader\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 557.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Let's start with a simple example. In a file named 'example.xml', we will put the following XML:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 476.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj  T* (  ) Tj (<) Tj (a) Tj (>) Tj (1) Tj (<) Tj (/a) Tj (>) Tj  T* (  ) Tj (<) Tj (b) Tj (>) Tj (2.2) Tj (<) Tj (/b) Tj (>) Tj  T* (  ) Tj (<) Tj (c) Tj (>) Tj (three) Tj (<) Tj (/c) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 456.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To process this file and turn it into a dictionary:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 363.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from xmlloader import *) Tj T* (>) Tj (>) Tj (>) Tj ( example = file\('example.xml', 'r'\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl = StreamXMLLoader\(example, 0\)  # 0 = All defaults on options) Tj T* (>) Tj (>) Tj (>) Tj ( result = xl.expectXML\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( print result) Tj T* ({'top': {'a': '1', 'c': 'three', 'b': '2.2'}}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 331.2236 cm
q
BT 1 0 0 1 0 14 Tm .785542 Tw 12 TL /F1 10 Tf 0 0 0 rg (We can match the ) Tj /F4 10 Tf (pretty print ) Tj /F1 10 Tf (nature of the original XML using the pretty module \(which comes with the) Tj T* 0 Tw (PicklingTools\):) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 202.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 120 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pretty import pretty) Tj T* (>) Tj (>) Tj (>) Tj ( pretty\(result\)) Tj T* ({) Tj T* (    'top':{) Tj T* (        'a':'1',) Tj T* (        'b':'2.2',) Tj T* (        'c':'three') Tj T* (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 158.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.419986 Tw (From the previous section, we know that all XML has to have exactly one outermost container: in this) Tj T* 0 Tw 1.228221 Tw (case, the 'top' key. Many times, when translating from XML to a dictionary, the outer most container is) Tj T* 0 Tw (superfluous. There is a simple option to 'drop' the outer most container:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 88.82362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( example = file\('example.xml', 'r'\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl = StreamXMLLoader\(example, XML_LOAD_DROP_TOP_LEVEL\)) Tj T* (>) Tj (>) Tj (>) Tj ( result = xl.expectXML\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( pretty\(result\)) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
61 0 obj
<< /Length 5766 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 691.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F3 10 Tf 0 0 0 rg ({) Tj T* (    'a':'1',) Tj T* (    'b':'2.2',) Tj T* (    'c':'three') Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 635.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.351751 Tw (You might notice that the values above are strings and not integers or floats: the default when turning) Tj T* 0 Tw .364535 Tw (XML into a dict is to just keep whatever string of content was in the XML as, well, a string. Using the eval) Tj T* 0 Tw 1.484104 Tw (function built-in to Python, we can turn these strings into their appropriate values. Or, we can use the) Tj T* 0 Tw (XML_LOAD_EVAL_CONTENT option \(which uses eval, but is a little bit smarter\):) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 506.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 504 120 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( example = file\('example.xml', 'r'\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl = StreamXMLLoader\(example, XML_LOAD_DROP_TOP_LEVEL | XML_LOAD_EVAL_CONTENT\)) Tj T* (>) Tj (>) Tj (>) Tj ( result = xl.expectXML\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( pretty\(result\)) Tj T* ({) Tj T* (    'a':1,) Tj T* (    'b':2.2,) Tj T* (    'c':'three') Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 438.6236 cm
q
BT 1 0 0 1 0 50 Tm .276457 Tw 12 TL /F1 10 Tf 0 0 0 rg (This brings the keys to real values. Internally, the XMLLoader uses eval \(which can be a security problem) Tj T* 0 Tw 1.30856 Tw (if you XML from untrusted sources\), but is a little bit smarter: it only keeps the result of the eval if the) Tj T* 0 Tw .044104 Tw (entire output would be consumed in a tag. For example <) Tj (tag) Tj (>) Tj (123 #12) Tj (<) Tj (/tag) Tj (> should will stay a string using) Tj T* 0 Tw .237126 Tw (XML_LOAD_EVAL_CONTENT, even though plain eval would return 123. And this is good! We don't want) Tj T* 0 Tw (to lose any content!:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 369.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( xml_text = ') Tj (<) Tj (tag) Tj (>) Tj (123 #12) Tj (<) Tj (/tag) Tj (>) Tj (') Tj T* (>) Tj (>) Tj (>) Tj ( xl = XMLLoader\(xml_text, XML_LOAD_EVAL_CONTENT\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl.expectXML\(\)) Tj T* ({'tag':'123 #12'}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 313.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .620814 Tw (Notice the example above shows the difference between XMLLoader and StreamXMLLoader: the former) Tj T* 0 Tw .597356 Tw (takes input from a string, the latter takes input from a stream. You might also note that in every example) Tj T* 0 Tw .721488 Tw (we have created a new XMLLoader: if we didn't, the loader would just read from where we left off in the) Tj T* 0 Tw (previous input. Rule of thumb: create a new XMLLoader for each XML document to process.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 280.4236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Attributes and the XMLLoader) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 262.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There are about 4 ways of dealing with attributes in XML when converting to Python dictionaries.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 256.4236 cm
Q
q
1 0 0 1 62.69291 184.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 54 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Put them in a special '__attrs__' sub-table: the default) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unfold them: use XML_LOAD_UNFOLD_ATTRS) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unfold them, but drop the _: use XML_LOAD_NO_PREPEND_CHAR) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Ignore them: use XML_LOAD_DROP_ALL_ATTRS option) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 184.4236 cm
Q
q
1 0 0 1 62.69291 166.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Consider the following XML file \(book.xml\):) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 97.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (?xml version="1.0" encoding="UTF-8"?) Tj (>) Tj  T* (<) Tj (top) Tj (>) Tj  T* (    ) Tj (<) Tj (chapter length="100" pages="200") Tj (>) Tj  T* (       ) Tj (<) Tj (text) Tj (>) Tj (hello) Tj (<) Tj (/text) Tj (>) Tj  T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
62 0 obj
<< /Length 3956 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 727.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg (   ) Tj (<) Tj (/chapter) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 695.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.357882 Tw (We will convert this XML to a dict using the default way of handling attributes: stick the attributes in a) Tj T* 0 Tw (special table called '__attrs__':) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 518.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 168 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( book = file\('book.xml','r'\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl = StreamXMLLoader\(book, XML_LOAD_DROP_TOP_LEVEL\)) Tj T* (>) Tj (>) Tj (>) Tj ( result = xl.expectXML\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( pretty\(result\)) Tj T* ({) Tj T* (    'chapter':{) Tj T* (        '__attrs__':{) Tj T* (            'length':'100',) Tj T* (            'pages':'200') Tj T* (        },) Tj T* (        'text':'hello') Tj T* (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 498.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Just like normal XML, we can turn the strings into real values using XML_LOAD_EVAL_CONTENT:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 321.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 486 168 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( book = file\('book.xml','r'\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl = StreamXMLLoader\(book, XML_LOAD_DROP_TOP_LEVEL | XML_LOAD_EVAL_CONTENT\)) Tj T* (>) Tj (>) Tj (>) Tj ( result = xl.expectXML\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( pretty\(result\)) Tj T* ({) Tj T* (    'chapter':{) Tj T* (        '__attrs__':{) Tj T* (            'length':100,) Tj T* (            'pages':200) Tj T* (        },) Tj T* (        'text':'hello') Tj T* (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 301.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This method makes it clear which values are attributes and which values are tags:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 256.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( print result['chapter']['__attrs__']['length']) Tj T* (>) Tj (>) Tj (>) Tj (    # attributes of chapter are under chapter/__attrs__ table) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 212.2236 cm
q
BT 1 0 0 1 0 26 Tm .411567 Tw 12 TL /F1 10 Tf 0 0 0 rg (Another different way to handle attributes \(if you don't like the above\) is to use the special character '_' in) Tj T* 0 Tw 1.003059 Tw (front of tags to indicate those came from the attributes section. With the XML_LOAD_UNFOLD_ATTRS) Tj T* 0 Tw (option, the attributes get ) Tj /F4 10 Tf (unfolded ) Tj /F1 10 Tf (into the table of interest, as special keys starting with an '_':) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 83.02362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 474 120 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( book = file\('book.xml','r'\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl = StreamXMLLoader\(book, XML_LOAD_DROP_TOP_LEVEL |) Tj T* (...                            XML_LOAD_EVAL_CONTENT | XML_LOAD_UNFOLD_ATTRS\)) Tj T* (>) Tj (>) Tj (>) Tj ( result = xl.expectXML\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( pretty\(result\)) Tj T* ({) Tj T* (    'chapter':{) Tj T* (        '_length':100,) Tj T* (        '_pages':200,) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
63 0 obj
<< /Length 3837 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 715.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (        'text':'hello') Tj T* (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 695.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (It's still pretty obvious what keys are attributes:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 650.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( print result['chapter']['_length']) Tj T* (>) Tj (>) Tj (>) Tj (    # The attributes of chapter all start with an _) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 618.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 6.343828 Tw (Of course, you can change the prepend character in the constructor of XMLLoader \(see) Tj T* 0 Tw (help\(XMLLoader\)\), or you can get rid of it altogether with XML_LOAD_NO_PREPEND_CHAR:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 453.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 636 156 re B*
Q
q
BT 1 0 0 1 0 134 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( book = file\('book.xml','r'\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl = StreamXMLLoader\(book, XML_LOAD_DROP_TOP_LEVEL |) Tj T* (...                            XML_LOAD_EVAL_CONTENT | XML_LOAD_UNFOLD_ATTRS | XML_LOAD_NO_PREPEND_CHAR\)) Tj T* (>) Tj (>) Tj (>) Tj ( result = xl.expectXML\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( pretty\(result\)) Tj T* ({) Tj T* (    'chapter':{) Tj T* (        'length':100,) Tj T* (        'pages':200,) Tj T* (        'text':'hello') Tj T* (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 433.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Finally, you can just drop all your attributes using the XML_LOAD_DROP_ALL_ATTRS:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 292.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 492 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( book = file\('book.xml','r'\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl = StreamXMLLoader\(book, XML_LOAD_DROP_TOP_LEVEL |) Tj T* (...                            XML_LOAD_EVAL_CONTENT | XML_LOAD_DROP_ALL_ATTRS \)) Tj T* (>) Tj (>) Tj (>) Tj ( result = xl.expectXML\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( pretty\(result\)) Tj T* ({) Tj T* (    'chapter':{) Tj T* (        'text':'hello') Tj T* (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 272.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A list of options is available below \(or look in xmlloader.py\):) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 83.02362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 180 re B*
Q
q
BT 1 0 0 1 0 158 Tm 12 TL /F3 10 Tf 0 0 0 rg (###################### OPTIONS for XML -) Tj (>) Tj ( dictionaries) Tj T*  T* (# ATTRS \(attributes on XML nodes\) by default becomes) Tj T* (# separate dictionaries in the table with a) Tj T* (# "__attrs__" key.  If you choose to unfold, the attributes) Tj T* (# become keys at the same level, with an underscore.) Tj T* (# \(thus "unfolding" the attributes to an outer level\).) Tj T* (#) Tj T* (# For example:) Tj T* (#   ) Tj (<) Tj (book attr1="1" attr2="2) Tj (>) Tj (contents) Tj (<) Tj (/book) Tj (>) Tj  T* (# WITHOUT unfolding  \(This is the DEFAULT\)) Tj T* (#   { 'book' : "contents",) Tj T* (#     '__attrs__' : {'attr1'="1", "attr2"="2"}) Tj T* (#   }) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
64 0 obj
<< /Length 2944 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 79.82362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 486 684 re B*
Q
q
BT 1 0 0 1 0 662 Tm 12 TL /F3 10 Tf 0 0 0 rg (# WITH unfolding:  \(Turning XML_LOAD_UNFOLD_ATTRS on\)) Tj T* (#   { 'book' : "contents",) Tj T* (#     '_attr1':"1",) Tj T* (#     '_attr2':"2",) Tj T* (#   }) Tj T* (XML_LOAD_UNFOLD_ATTRS = 0x01) Tj T*  T*  T* (# When unfolding, choose to either use the XML_PREPEND character '_') Tj T* (# or no prepend at all.  This only applies if XML_LOAD_UNFOLD_ATTRS is on.) Tj T* (#   ) Tj (<) Tj (book attr1="1" attr2="2) Tj (>) Tj (contents) Tj (<) Tj (/book) Tj (>) Tj  T* (# becomes) Tj T* (#  { 'book': "content",) Tj T* (#    'attr1':'1',) Tj T* (#    'attr2':'2') Tj T* (#  }) Tj T* (# Of course, the problem is you can't differentiate TAGS and ATTRIBUTES) Tj T* (# with this option) Tj T* (XML_LOAD_NO_PREPEND_CHAR = 0x02) Tj T*  T* (# If XML attributes are being folded up, then you may) Tj T* (# want to prepend a special character to distinguish attributes) Tj T* (# from nested tags: an underscore is the usual default.  If) Tj T* (# you don't want a prepend char, use XML_LOAD_NO_PREPEND_CHAR option) Tj T* (XML_PREPEND_CHAR = '_') Tj T*  T* (# Or, you may choose to simply drop all attributes:) Tj T* (# ) Tj (<) Tj (book a="1") Tj (>) Tj (text) Tj (<) Tj (book) Tj (>) Tj  T* (#   becomes) Tj T* (# { 'book':'1' }   # Drop ALL attributes) Tj T* (XML_LOAD_DROP_ALL_ATTRS = 0x04) Tj T*  T* (# By default, we use Dictionaries \(as we trying to model) Tj T* (# key-value dictionaries\).  Can also use ordered dictionaries) Tj T* (# if you really truly care about the order of the keys from) Tj T* (# the XML) Tj T* (XML_LOAD_USE_OTABS = 0x08) Tj T*  T* (# Sometimes, for key-value translation, somethings don't make sense.) Tj T* (# Normally:) Tj T* (#   ) Tj (<) Tj (top a="1" b="2") Tj (>) Tj (content) Tj (<) Tj (/top) Tj (>) Tj  T* (# .. this will issue a warning that attributes a and b will be dropped) Tj T* (# because this doesn't translate "well" into a key-value substructure.) Tj T* (#   { 'top':'content' }) Tj T* (#) Tj T* (# If you really want the attributes, you can try to keep the content by setting) Tj T* (# the value below \(and this will suppress the warning\)) Tj T* (#) Tj T* (#  { 'top': { '__attrs__':{'a':1, 'b':2}, '__content__':'content' } }) Tj T* (#) Tj T* (# It's probably better to rethink your key-value structure, but this) Tj T* (# will allow you to move forward and not lose the attributes) Tj T* (XML_LOAD_TRY_TO_KEEP_ATTRIBUTES_WHEN_NOT_TABLES = 0x10) Tj T*  T* (# Drop the top-level key: the XML spec requires a "containing") Tj T* (# top-level key.  For example: ) Tj (<) Tj (top) Tj (>) Tj (<) Tj (l) Tj (>) Tj (1) Tj (<) Tj (/l) Tj (>) Tj (<) Tj (l) Tj (>) Tj (2) Tj (<) Tj (/l) Tj (>) Tj (<) Tj (/top) Tj (>) Tj  T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
65 0 obj
<< /Length 4447 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 391.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 372 re B*
Q
q
BT 1 0 0 1 0 350 Tm 12 TL /F3 10 Tf 0 0 0 rg (# becomes { 'top':[1,2] }  \(and you need the top-level key to get a) Tj T* (# list\) when all you really want is the list:  [1,2].  This simply) Tj T* (# drops the "envelope" that contains the real data.) Tj T* (XML_LOAD_DROP_TOP_LEVEL = 0x20) Tj T*  T* (# Converting from XML to Tables results in almost everything) Tj T* (# being strings:  this option allows us to "try" to guess) Tj T* (# what the real type is by doing an Eval on each member:) Tj T* (# Consider: ) Tj (<) Tj (top) Tj (>) Tj ( ) Tj (<) Tj (a) Tj (>) Tj (1) Tj (<) Tj (/a) Tj (>) Tj ( ) Tj (<) Tj (b) Tj (>) Tj (1.1) Tj (<) Tj (/b) Tj (>) Tj ( ) Tj (<) Tj (c) Tj (>) Tj ('string' ) Tj (<) Tj (/top) Tj (>) Tj  T* (# WITHOUT this option \(the default\) -) Tj (>) Tj ( {'top': { 'a':'1','b':'1.1','c':'str'}}) Tj T* (# WITH this option                  -) Tj (>) Tj ( {'top': { 'a':1, 'b':1.1, 'c':'str' } }) Tj T* (# If the content cannot be evaluated, then content simply says 'as-is'.) Tj T* (# Consider combining this with the XML_DUMP_STRINGS_BEST_GUESS) Tj T* (# if you go back and forth between Tables and XML a lot.) Tj T* (XML_LOAD_EVAL_CONTENT = 0x40) Tj T*  T* (# Even though illegal XML, allow element names starting with Digits:) Tj T* (# when it does see a starting digit, it turns it into an _digit) Tj T* (# so that it is still legal XML) Tj T* (XML_TAGS_ACCEPTS_DIGITS = 0x80) Tj T*  T* (# Allows digits as starting XML tags, even though illegal XML.) Tj T* (# This preserves the number as a tag.) Tj T* (XML_DIGITS_AS_TAGS = 0x80000) Tj T*  T* (# When loading XML, do we require the strict XML header?) Tj T* (# I.e., ) Tj (<) Tj (?xml version="1.0"?) Tj (>) Tj  T* (# By default, we do not.  If we set this option, we get an error) Tj T* (# thrown if we see XML without a header) Tj T* (XML_STRICT_HDR = 0x10000) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 358.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Lists and the XMLLoader/XMLDumper) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 328.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .294269 Tw (Lists present some interesting challenges when converting back and forth. XML supports lists, but Python) Tj T* 0 Tw (lists and XML lists are very different beasts in a few areas.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 310.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Consider: by default, multiple entries of the same tag in XML form a list:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 241.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj  T* (   ) Tj (<) Tj (ch) Tj (>) Tj (text1) Tj (<) Tj (/ch) Tj (>) Tj (   # list item 1) Tj T* (   ) Tj (<) Tj (ch) Tj (>) Tj (text2) Tj (<) Tj (/ch) Tj (>) Tj (   # list item 2) Tj T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 221.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There is an easy, obvious way to convert this into Python lists, and it works well:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 164.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( xl = XMLLoader\(") Tj (<) Tj (top) Tj (>) Tj (<) Tj (ch) Tj (>) Tj (text1) Tj (<) Tj (/ch) Tj (>) Tj (<) Tj (ch) Tj (>) Tj (text2) Tj (<) Tj (/ch) Tj (>) Tj (<) Tj (/top) Tj (>) Tj ("\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl.expectXML\(\)) Tj T* ({ 'top': { 'ch': ['text1', 'text2'] } }) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 144.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (What happens, though, if there is only one tag in the XML list?:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 87.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj  T* (  ) Tj (<) Tj (ch) Tj (>) Tj (text1) Tj (<) Tj (/ch) Tj (>) Tj (   # list item?  plain data?) Tj T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
66 0 obj
<< /Length 5962 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .067608 Tw (In the absence of extra information, 'ch' becomes a plain string: in XML, the only way to signal a list is with) Tj T* 0 Tw (multiple entries, which don't exist here:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 683.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( xl = XMLLoader\(") Tj (<) Tj (top) Tj (>) Tj (<) Tj (ch) Tj (>) Tj (text1) Tj (<) Tj (/ch) Tj (>) Tj (<) Tj (/top) Tj (>) Tj (", 0\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl.expectXML\(\)) Tj T* ({'top': {'ch': 'text1' }}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 627.8236 cm
q
BT 1 0 0 1 0 38 Tm 1.556098 Tw 12 TL /F1 10 Tf 0 0 0 rg (In a full XML world, where schemas abound, the solution might be to have a schema to enforce this.) Tj T* 0 Tw .166654 Tw (Unfortunately, the XML tools here assume we ) Tj /F4 10 Tf (just ) Tj /F1 10 Tf (have the information of the table itself: there is no extra) Tj T* 0 Tw 1.181567 Tw (information. So, we have to make due with what XML gives us. In this case, we use the convention of) Tj T* 0 Tw (having a special attribute ) Tj 1 0 0 rg (type__ ) Tj 0 0 0 rg (to indicate that 'ch' is a list:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 570.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj  T* (  ) Tj (<) Tj (ch type__="list") Tj (>) Tj (text1) Tj (<) Tj (/ch) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 550.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Adding this attribute forces the XML translation to keep ch as a list:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 493.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( xl = XMLLoader\(") Tj (<) Tj (top) Tj (>) Tj (<) Tj (ch type__='list') Tj (>) Tj (text1) Tj (<) Tj (/ch) Tj (>) Tj (<) Tj (/top) Tj (>) Tj (", 0\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl.expectXML\(\)) Tj T* ({'top': {'ch': ['text1']}}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 473.4236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (For consistency, you can ) Tj /F4 10 Tf (always ) Tj /F1 10 Tf (put it on the first entry to tag an entity as a list:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 404.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj  T* ( ) Tj (<) Tj (ch type__="list") Tj (>) Tj (text1) Tj (<) Tj (/ch) Tj (>) Tj  T* ( ) Tj (<) Tj (ch) Tj (>) Tj (text2) Tj (<) Tj (/ch) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 384.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (And when you translate:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 327.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( xl = XMLLoader\(") Tj (<) Tj (top) Tj (>) Tj (<) Tj (ch type__='list') Tj (>) Tj (text1) Tj (<) Tj (/ch) Tj (>) Tj (<) Tj (ch) Tj (>) Tj (text2) Tj (<) Tj (/ch) Tj (>) Tj (<) Tj (/top) Tj (>) Tj (", 0\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl.expectXML\(\)) Tj T* ({'top': {'ch': ['text1', 'text2']}}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 271.0236 cm
q
BT 1 0 0 1 0 38 Tm .65856 Tw 12 TL /F1 10 Tf 0 0 0 rg (But you don't have to put the ) Tj 1 0 0 rg (type__ ) Tj 0 0 0 rg (tag on if you have multiple entries: in that case the tools can easily) Tj T* 0 Tw 1.048626 Tw (figure out if it's a list or not. It's really only if you have a ) Tj /F4 10 Tf (single lonesome tag ) Tj /F1 10 Tf (that you need the special) Tj T* 0 Tw .32249 Tw 1 0 0 rg (type__ ) Tj 0 0 0 rg (to force a list. \(but ONLY put in on the first entry: if you put it on all the entries, you won't get what) Tj T* 0 Tw (you expect\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 253.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (How do you represent an empty list? Use an empty tag with the ) Tj 1 0 0 rg (type__ ) Tj 0 0 0 rg (attribute:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 195.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj  T* (  ) Tj (<) Tj (ch type__="list"/) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 175.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Translating, you'll see, yes, 'ch' becomes an empty list:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 118.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( xl = XMLLoader\(") Tj (<) Tj (top) Tj (>) Tj (<) Tj (ch type__='list'/) Tj (>) Tj (<) Tj (/top) Tj (>) Tj (", 0\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl.expectXML\(\)) Tj T* ({'top': {'ch': []}}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 86.62362 cm
q
BT 1 0 0 1 0 14 Tm .772765 Tw 12 TL /F1 10 Tf 0 0 0 rg (There's another way in which XML lists and Python lists differ: all XML lists have to be ) Tj /F4 10 Tf (named) Tj /F1 10 Tf (, whereas) Tj T* 0 Tw (Python has the notion of ) Tj /F4 10 Tf (anonymous ) Tj /F1 10 Tf (lists and dictionaries. Consider in Python:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 80.62362 cm
Q
 
endstream
endobj
67 0 obj
<< /Length 4656 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 739.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = { 'top': [ [1,2,3],['a','b'], {'a':1} ] }) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 739.8236 cm
Q
q
1 0 0 1 62.69291 685.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.29284 Tw (The 'top' list contains two anonymous lists and one anonymous dictionary. Basically, because lists can) Tj T* 0 Tw .164651 Tw (hold anything \(including other lists\), the content inside the list exists without a name. Python programmers) Tj T* 0 Tw .561098 Tw (normally think of that as just a['top'][0], a['top'][1], etc. using indices, so they don't care that the inner lists) Tj T* 0 Tw (don't have names.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 631.8236 cm
q
BT 1 0 0 1 0 38 Tm .872488 Tw 12 TL /F1 10 Tf 0 0 0 rg (In XML, all tags ) Tj /F4 10 Tf (HAVE ) Tj /F1 10 Tf (to have a name. To preserve the XML notion of lists, all entries should have the) Tj T* 0 Tw .09332 Tw (same name as well \(we saw above that XML enforces lists by having repeated tags\). This means we can't) Tj T* 0 Tw .259431 Tw (use 0,1,2, etc. like a Python programmer would. The XML needs a name for the anonymous list: the tools) Tj T* 0 Tw (use ') Tj 1 0 0 rg (list__) Tj 0 0 0 rg (':) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 406.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 216 re B*
Q
q
BT 1 0 0 1 0 194 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( xd = XMLDumper\(sys.stdout, XML_DUMP_PRETTY\)) Tj T* (>) Tj (>) Tj (>) Tj ( a =  { 'top': [ [1,2,3],['a','b'], {'a':1} ] }) Tj T* (>) Tj (>) Tj (>) Tj ( xd.XMLDumpKeyValue\('a', a\)) Tj T* (<) Tj (a) Tj (>) Tj  T* (    ) Tj (<) Tj (top) Tj (>) Tj  T* (        ) Tj (<) Tj (list__) Tj (>) Tj (1) Tj (<) Tj (/list__) Tj (>) Tj  T* (        ) Tj (<) Tj (list__) Tj (>) Tj (2) Tj (<) Tj (/list__) Tj (>) Tj  T* (        ) Tj (<) Tj (list__) Tj (>) Tj (3) Tj (<) Tj (/list__) Tj (>) Tj  T* (    ) Tj (<) Tj (/top) Tj (>) Tj  T* (    ) Tj (<) Tj (top) Tj (>) Tj  T* (        ) Tj (<) Tj (list__) Tj (>) Tj (a) Tj (<) Tj (/list__) Tj (>) Tj  T* (        ) Tj (<) Tj (list__) Tj (>) Tj (b) Tj (<) Tj (/list__) Tj (>) Tj  T* (    ) Tj (<) Tj (/top) Tj (>) Tj  T* (    ) Tj (<) Tj (top) Tj (>) Tj  T* (        ) Tj (<) Tj (a) Tj (>) Tj (1) Tj (<) Tj (/a) Tj (>) Tj  T* (    ) Tj (<) Tj (/top) Tj (>) Tj  T* (<) Tj (/a) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 362.6236 cm
q
BT 1 0 0 1 0 26 Tm 1.809431 Tw 12 TL /F1 10 Tf 0 0 0 rg (The convention that the toolset uses is that ") Tj 1 0 0 rg (list__) Tj 0 0 0 rg (" will be the name XML uses to correspond to the) Tj T* 0 Tw .503145 Tw (anonymous Python lists. In the case of the dictionary, being inside a list like that makes it "obvious" it's a) Tj T* 0 Tw (dictionary, so we don't need any special mechanism for that. To be sure this converts back faithfully:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 113.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 240 re B*
Q
q
BT 1 0 0 1 0 218 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = """) Tj T* (...   ) Tj (<) Tj (a) Tj (>) Tj  T* (...       ) Tj (<) Tj (top) Tj (>) Tj  T* (...           ) Tj (<) Tj (list__) Tj (>) Tj (1) Tj (<) Tj (/list__) Tj (>) Tj  T* (...           ) Tj (<) Tj (list__) Tj (>) Tj (2) Tj (<) Tj (/list__) Tj (>) Tj  T* (...           ) Tj (<) Tj (list__) Tj (>) Tj (3) Tj (<) Tj (/list__) Tj (>) Tj  T* (...       ) Tj (<) Tj (/top) Tj (>) Tj  T* (...       ) Tj (<) Tj (top) Tj (>) Tj  T* (...           ) Tj (<) Tj (list__) Tj (>) Tj (a) Tj (<) Tj (/list__) Tj (>) Tj  T* (...           ) Tj (<) Tj (list__) Tj (>) Tj (b) Tj (<) Tj (/list__) Tj (>) Tj  T* (...       ) Tj (<) Tj (/top) Tj (>) Tj  T* (...       ) Tj (<) Tj (top) Tj (>) Tj  T* (...           ) Tj (<) Tj (a) Tj (>) Tj (1) Tj (<) Tj (/a) Tj (>) Tj  T* (...       ) Tj (<) Tj (/top) Tj (>) Tj  T* (...   ) Tj (<) Tj (/a) Tj (>) Tj  T* (... """) Tj T* (>) Tj (>) Tj (>) Tj ( xl = XMLLoader\(x, 0\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl.expectXML\(\)) Tj T* ({'a': {'top': [['1', '2', '3'], ['a', 'b'], {'a': '1'}]}}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 93.42362 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There is one final corner case:) Tj T* ET
Q
Q
 
endstream
endobj
68 0 obj
<< /Length 4454 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 739.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a= { 'top': [ {} ] }) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 695.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .384431 Tw (An empty dictionary inside a list \(so the dictionary is anonymous\). Any keys in a dict usually offer enough) Tj T* 0 Tw .749488 Tw (information for the XML tools to figure out that it's a dictionary. In this case, since there are no keys, we) Tj T* 0 Tw (need a special key to indicate an anonymous dictionary:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 590.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( xd.XMLDumpKeyValue\('a', {'top': [ {} ] } \)) Tj T* (<) Tj (a) Tj (>) Tj  T* (    ) Tj (<) Tj (top type__="list") Tj (>) Tj  T* (        ) Tj (<) Tj (dict__) Tj (>) Tj  T* (        ) Tj (<) Tj (/dict__) Tj (>) Tj  T* (    ) Tj (<) Tj (/top) Tj (>) Tj  T* (<) Tj (/a) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 570.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (In fact, you can use ') Tj 1 0 0 rg (dict__) Tj 0 0 0 rg (' to name an anonymous dictionary, and the tools will do the right thing:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 417.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 144 re B*
Q
q
BT 1 0 0 1 0 122 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = """) Tj T* (... ) Tj (<) Tj (a) Tj (>) Tj  T* (...       ) Tj (<) Tj (top type__="list") Tj (>) Tj  T* (...           ) Tj (<) Tj (dict__) Tj (>) Tj  T* (...           ) Tj (<) Tj (/dict__) Tj (>) Tj  T* (...       ) Tj (<) Tj (/top) Tj (>) Tj  T* (...   ) Tj (<) Tj (/a) Tj (>) Tj  T* (... """) Tj T* (>) Tj (>) Tj (>) Tj ( xl = XMLLoader\(x, 0\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl.expectXML\(\)) Tj T* ({'a': {'top': [{}]}}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 397.4236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (In fact, adding the ') Tj 1 0 0 rg (dict__) Tj 0 0 0 rg (' in the anonymous list works just fine, it's just clumsier:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 220.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 168 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = """) Tj T* (... ) Tj (<) Tj (a) Tj (>) Tj  T* (...   ) Tj (<) Tj (top) Tj (>) Tj  T* (...     ) Tj (<) Tj (dict__) Tj (>) Tj (<) Tj (a) Tj (>) Tj (1) Tj (<) Tj (/a) Tj (>) Tj (<) Tj (/dict__) Tj (>) Tj  T* (...   ) Tj (<) Tj (/top) Tj (>) Tj  T* (...   ) Tj (<) Tj (top) Tj (>) Tj  T* (...     ) Tj (<) Tj (dict__/) Tj (>) Tj  T* (...   ) Tj (<) Tj (/top) Tj (>) Tj  T* (... ) Tj (<) Tj (/a) Tj (>) Tj  T* (... """) Tj T* (>) Tj (>) Tj (>) Tj ( xl = XMLLoader\(x, 0\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl.expectXML\(\)) Tj T* ({'a': {'top': [{'a': '1'}, {}]}}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 187.2236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Array Disposition) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 121.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .021647 Tw (The ArrayDisposition parameter of the XMLLoader and XMLDumper is often misunderstood. Basically, the) Tj T* 0 Tw .462651 Tw (array disposition tells the XMLLoader/XMLDumper how to deal with arrays of POD: POD stands for Plain) Tj T* 0 Tw .013876 Tw (Old Data, meaning data like ints, floats, complexes \(In hard core C, POD is quick and easy to manipulate\).) Tj T* 0 Tw 1.617045 Tw (POD arrays are very important for efficient processing of lots of scientific data as they are are stored) Tj T* 0 Tw (efficiently as contiguous data in memory.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 79.22362 cm
q
BT 1 0 0 1 0 26 Tm .29332 Tw 12 TL /F1 10 Tf 0 0 0 rg (Python lists ) Tj /F4 10 Tf (are not ) Tj /F1 10 Tf (POD arrays: lists have to deal with heterogeneous data \(i.e., [1, 2.2, 'three']\) and thus) Tj T* 0 Tw .832765 Tw (aren't as efficient for storing large amounts of data. In a crunch, however, POD arrays can be stored as) Tj T* 0 Tw (Python lists.) Tj T* ET
Q
Q
 
endstream
endobj
69 0 obj
<< /Length 6776 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There are five different array dispositions \(number 4 is new to PicklingTools 1.3.0\):) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 747.0236 cm
Q
q
1 0 0 1 62.69291 121.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 620 cm
Q
q
1 0 0 1 20 620 cm
Q
q
1 0 0 1 20 482.8 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 122.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 110.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.454976 Tw (ARRAYDISPOSITION_AS_NUMERIC : Assume all array data is using the Python Numeric) Tj T* 0 Tw (module which keeps arrays of POD:) Tj T* ET
Q
Q
q
1 0 0 1 23 65 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 425.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import Numeric) Tj T* (>) Tj (>) Tj (>) Tj ( a = Numeric.array\([1,2,3], 'f'\) # POD array of floats) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.263984 Tw (The Python Numeric module may or may not be installed on your platform: many versions of) Tj T* 0 Tw 2.43561 Tw (RedHat Linux allow an RPM to be installed. If you use older XMPY \(pre 4.0\), Numeric is) Tj T* 0 Tw (installed by default. Newer XMPY should use NumPy \(see next bullet\).) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (As of 1.5.x series, Numeric is out of maintenance and we tend to prefer NumPy.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 476.8 cm
Q
q
1 0 0 1 20 357.6 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 104.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 92.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .360888 Tw (ARRAYDISPOSITION_AS_NUMPY : Assume all array data is using the Python NumPy module) Tj T* 0 Tw (which keeps arrays of POD:) Tj T* ET
Q
Q
q
1 0 0 1 23 47 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 425.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import numpy) Tj T* (>) Tj (>) Tj (>) Tj ( a = numpy.array\([1,2,3], 'f'\) # POD array of floats) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.744651 Tw (The Python numpy module may or may not be installed on your platform: many versions of) Tj T* 0 Tw .931318 Tw (RedHat Linux allow an RPM to be installed. NumPy really only works with XMPY greater than) Tj T* 0 Tw (version 4.0.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 351.6 cm
Q
q
1 0 0 1 20 258.4 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 78.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 54.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .646905 Tw (ARRAYDISPOSITION_AS_LIST: Turn all array POD data into a list. This is the most inefficient) Tj T* 0 Tw 1.277633 Tw (way to store POD arrays, but it is the most compatible, as all versions of Python support the) Tj T* 0 Tw (Python list:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 425.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( l = [1,2,3]  # Not stored as anything special: uses) Tj T* (>) Tj (>) Tj (>) Tj (              # overhead of lists which is not the most) Tj T* (>) Tj (>) Tj (>) Tj (              # efficient way to store lots of POD) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 20 252.4 cm
Q
q
1 0 0 1 20 121.2 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 116.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 116.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ARRAYDISPOSITION_AS_ARRAY: Most versions of Python have the array module:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 425.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import array) Tj T* (>) Tj (>) Tj (>) Tj ( a = array.array\('f', [1,2,3]\) # POD array of floats) Tj T* (>) Tj (>) Tj (>) Tj (                               # NOTE! Python arrays) Tj T* (>) Tj (>) Tj (>) Tj (                               # have different interfaces) Tj T* (>) Tj (>) Tj (>) Tj (                               # than Numeric arrays) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .207318 Tw (The Python array module doesn't support complex data, but is available on almost Pythons as a) Tj T* 0 Tw (default module.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 115.2 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 100.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 76.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.86497 Tw (ARRAYDISPOSITION_AS_NUMERIC_WRAPPER: This is new to simple array class which) Tj T* 0 Tw 2.781412 Tw (wraps the Python array, but retains the interface of the Numeric array and also supports) Tj T* 0 Tw (complex data.) Tj T* ET
Q
Q
q
1 0 0 1 23 70.2 cm
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 405.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from simplearray import SimpleArray as array) Tj T* (>) Tj (>) Tj (>) Tj ( a = array\([1,2,3], 'D'\)   # POD array of complex doubles:) Tj T* (>) Tj (>) Tj (>) Tj (                           # works like Numeric arrays but) Tj T* (>) Tj (>) Tj (>) Tj (                           # just a simple Python class) Tj T* (>) Tj (>) Tj (>) Tj (                           # that wraps Python array module) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 121.0236 cm
Q
q
1 0 0 1 62.69291 91.02362 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.425318 Tw (In general, the array disposition indicate what the XMLLoader/XMLDumper will try to do with arrays of) Tj T* 0 Tw (POD. The XMLLoader and XMLDumper do slightly different things based on the array disposition.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 85.02362 cm
Q
 
endstream
endobj
70 0 obj
<< /Length 5328 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 688.1575 cm
Q
q
1 0 0 1 20 688.1575 cm
Q
q
1 0 0 1 20 151.3575 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 521.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 485.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 2.697674 Tw (In the XMLDumper case, if the Python dictionary contains any POD data \(Numeric array,) Tj T* 0 Tw .193318 Tw (NumPy array, Python array, or Numeric array wrapper\), it will dump it as Numeric data UNLESS) Tj T* 0 Tw .391654 Tw (the array disposition is AS_LIST, in which case it will dump it as a list. Here's an example using) Tj T* 0 Tw (the Numeric wrapper array, and how it dumps:) Tj T* ET
Q
Q
q
1 0 0 1 23 368.6 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 419.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from simplearray import SimpleArray as array) Tj T* (>) Tj (>) Tj (>) Tj ( e = { 'data': array\([1,2,3], 'D'\), 'time':'12:00' }) Tj T* (>) Tj (>) Tj (>) Tj  T* (>) Tj (>) Tj (>) Tj ( import sys) Tj T* (>) Tj (>) Tj (>) Tj ( from xmldumper import *) Tj T* (>) Tj (>) Tj (>) Tj ( xd = XMLDumper\(sys.stdout, e, XML_DUMP_PRETTY,) Tj T* (...                ARRAYDISPOSITION_AS_NUMERIC_WRAPPER\)) Tj T* (>) Tj (>) Tj (>) Tj ( xd.XMLDumpKeyValue\('top', e\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 342.6 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The output:) Tj T* ET
Q
Q
q
1 0 0 1 23 273.4 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 419.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj  T* (    ) Tj (<) Tj (data arraytype__="D") Tj (>) Tj (\(1+0j\),\(2+0j\),\(3+0j\)) Tj (<) Tj (/data) Tj (>) Tj  T* (    ) Tj (<) Tj (time) Tj (>) Tj (12:00) Tj (<) Tj (/time) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 211.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .322126 Tw (The POD array dumps a long list of comma-separated values \(CSV\), with an attribute indicating) Tj T* 0 Tw 1.734104 Tw (what the original type of the data was. But, if we use the default array disposition \(which is) Tj T* 0 Tw 1.416136 Tw (ARRAYDISPOSITION_AS_LIST\), that array will be turned into a plain list, and all POD array) Tj T* 0 Tw (information will be lost \(including the type tag\):) Tj T* ET
Q
Q
q
1 0 0 1 23 154.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 419.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( xd = XMLDumper\(sys.stdout, XML_DUMP_PRETTY\)) Tj T* (>) Tj (>) Tj (>) Tj (                          # Default is ARRAYDISPOSITION_AS_LIST\)) Tj T* (>) Tj (>) Tj (>) Tj ( xd.XMLDumpKeyValue\('top', e\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 128.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The output is:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 419.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj  T* (    ) Tj (<) Tj (data) Tj (>) Tj (\(1+0j\)) Tj (<) Tj (/data) Tj (>) Tj  T* (    ) Tj (<) Tj (data) Tj (>) Tj (\(2+0j\)) Tj (<) Tj (/data) Tj (>) Tj  T* (    ) Tj (<) Tj (data) Tj (>) Tj (\(3+0j\)) Tj (<) Tj (/data) Tj (>) Tj  T* (    ) Tj (<) Tj (time) Tj (>) Tj (12:00) Tj (<) Tj (/time) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .084983 Tw (Although we lose some information with this array disposition, this format is very compatible with) Tj T* 0 Tw (many XML tools \(as the notion of XML lists is well understood by those tools\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 145.3575 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 130.3575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 118.3575 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.18561 Tw (From the XMLLoader's point of view: it will only try to convert POD arrays if it actually) Tj T* 0 Tw (encounters POD arrays! If the XML has only plain XML lists, the array disposition doesn't matter:) Tj T* ET
Q
Q
q
1 0 0 1 23 13.15748 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 416.6898 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (!-- XMLLoader won't care what the array disposition is for this) Tj T* (     data, because all key values are standard lists: there is) Tj T* (     no special tags or anything indicating otherwise --!) Tj (>) Tj  T* (<) Tj (top) Tj (>) Tj  T* (    ) Tj (<) Tj (data) Tj (>) Tj (\(1+0j\)) Tj (<) Tj (/data) Tj (>) Tj  T* (    ) Tj (<) Tj (data) Tj (>) Tj (\(2+0j\)) Tj (<) Tj (/data) Tj (>) Tj  T* (    ) Tj (<) Tj (data) Tj (>) Tj (\(3+0j\)) Tj (<) Tj (/data) Tj (>) Tj  T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
Q
Q
 
endstream
endobj
71 0 obj
<< /Length 5851 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 211.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 540.6 Tm  T* ET
q
1 0 0 1 23 429.4 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 416.6898 120 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F3 10 Tf 0 0 0 rg (    ) Tj (<) Tj (time) Tj (>) Tj (12:00) Tj (<) Tj (/time) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj  T*  T* (<) Tj (!---- XMLLoader *will care* because it sees the special) Tj T* (       arraytype__ tag below, so it knows that array POD --!) Tj (>) Tj  T* (<) Tj (top) Tj (>) Tj  T* (    ) Tj (<) Tj (data arraytype__="D") Tj (>) Tj (\(1+0j\),\(2+0j\),\(3+0j\)) Tj (<) Tj (/data) Tj (>) Tj  T* (    ) Tj (<) Tj (time) Tj (>) Tj (12:00) Tj (<) Tj (/time) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 379.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.584983 Tw (When loading, the XMLLoader will follow the array disposition: all array POD data will be) Tj T* 0 Tw .958555 Tw (converted to either a Numeric array, Python array, Numeric wrapper array or plain Python list.) Tj T* 0 Tw (As an example for Numeric Wrapper array:) Tj T* ET
Q
Q
q
1 0 0 1 23 238.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 432 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = """) Tj T* (... ) Tj (<) Tj (top) Tj (>) Tj  T* (...     ) Tj (<) Tj (data arraytype__="D") Tj (>) Tj (\(1+0j\),\(2+0j\),\(3+0j\)) Tj (<) Tj (/data) Tj (>) Tj  T* (...     ) Tj (<) Tj (time) Tj (>) Tj (12:00) Tj (<) Tj (/time) Tj (>) Tj  T* (... ) Tj (<) Tj (/top) Tj (>) Tj  T* (... """) Tj T* (>) Tj (>) Tj (>) Tj ( from xmlloader import *) Tj T* (>) Tj (>) Tj (>) Tj ( xl = XMLLoader\(x, 0, ARRAYDISPOSITION_AS_NUMERIC_WRAPPER\)) Tj T* (>) Tj (>) Tj (>) Tj ( xl.expectXML\(\)) Tj T* ({'top': {'data': array\([\(1+0j\),\(2+0j\),\(3+0j\)], 'D'\), 'time': '12:00'}}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 188.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.039318 Tw (In the above example, the POD array was preserved, because we set the array disposition to) Tj T* 0 Tw 1.378555 Tw (load all POD arrays using the Numeric wrapper \(simplearray.py\). If we don't specify an array) Tj T* 0 Tw (disposition, it uses the ARRAYDISPOSITION_AS_LIST as the default:) Tj T* ET
Q
Q
q
1 0 0 1 23 47 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 419.6898 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = """) Tj T* (... ) Tj (<) Tj (top) Tj (>) Tj  T* (...    ) Tj (<) Tj (data arraytype__="D") Tj (>) Tj (\(1+0j\),\(2+0j\),\(3+0j\)) Tj (<) Tj (/data) Tj (>) Tj  T* (...    ) Tj (<) Tj (time) Tj (>) Tj (12:00) Tj (<) Tj (/time) Tj (>) Tj  T* (... ) Tj (<) Tj (/top) Tj (>) Tj  T* (... """) Tj T* (>) Tj (>) Tj (>) Tj ( from xmlloader import *) Tj T* (>) Tj (>) Tj (>) Tj ( xl = XMLLoader\(x, 0\) # Default is ARRAYDISPOSITION_AS_LIST) Tj T* (>) Tj (>) Tj (>) Tj ( xl.expectXML\(\)) Tj T* ({'top': {'data': [\(1+0j\), \(2+0j\), \(3+0j\)], 'time': '12:00'}}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.01832 Tw (In the above case, the array was converted to a Python list: it preserves the data, but not the) Tj T* 0 Tw .217209 Tw (original type of the POD data \(was the data complex float or complex double?\) or the fact that is) Tj T* 0 Tw (was a POD array.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 211.4236 cm
Q
q
1 0 0 1 62.69291 193.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The real reason for ArrayDisposition is because Python doesn't have a "good" standard POD array:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 187.4236 cm
Q
q
1 0 0 1 62.69291 85.42362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 96 cm
Q
q
1 0 0 1 20 96 cm
Q
q
1 0 0 1 20 84 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Numeric arrays are a standard at many places of work, but they aren't installed as standard) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 78 cm
Q
q
1 0 0 1 20 42 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.255697 Tw (Python array don't handle complex data, which is a non-starter for some kinds of processing.) Tj T* 0 Tw .621412 Tw (They also don't do array operations \(vector add, multiply, etc.\) AND the serialization for Python) Tj T* 0 Tw (arrays has changed between 2.6 and 2.7, so they are incompatibile between Pythons.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 36 cm
Q
q
1 0 0 1 20 24 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Numeric wrapper handles complex, but still doesn't have the vector operations) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 18 cm
Q
q
1 0 0 1 20 6 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Python lists are standard, but are a poor way to store large amounts of data) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
 
endstream
endobj
72 0 obj
<< /Length 6232 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 729.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .00311 Tw (The NumPy package is fairly standard on most modern distributions, but you may still have to go) Tj T* 0 Tw .323145 Tw (out of your way to get it. In general NumPy is the best choice, as NumPy is in maintenance and) Tj T* 0 Tw (fairly standard across multiple platforms.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 729.0236 cm
Q
q
1 0 0 1 62.69291 687.0236 cm
q
BT 1 0 0 1 0 26 Tm .139985 Tw 12 TL /F1 10 Tf 0 0 0 rg (C++ doesn't have this problem: the Array) Tj (<) Tj (T) Tj (> is the standard way to deal with POD arrays. AS_NUMERIC) Tj T* 0 Tw 2.54152 Tw (and AS_PYTHON_ARRAY are handled the same \(using the C++ Array) Tj (<) Tj (T) Tj (> class\). The AS_LIST is) Tj T* 0 Tw (offered as a compatibility option and will convert POD arrays to the equivalent Python List \(the C++ Arr\(\)\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 669.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In XML, the 'arraytype' tags are the following:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 503.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 156 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 134 Tm /F3 10 Tf 12 TL (s: 1 byte signed char) Tj T* (S: 1 byte unsigned char) Tj T* (i: 2 byte signed char) Tj T* (I: 2 byte unsigned char) Tj T* (l: 4 byte signed char) Tj T* (L: 4 byte unsigned char) Tj T* (x: 4 byte signed char) Tj T* (X: 4 byte unsigned char) Tj T* (f: 4 byte float) Tj T* (d: 8 byte double) Tj T* (F: 8 byte complex \(2 4-byte floats\)) Tj T* (D: 16 byte complex \(2 8-byte doubles\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 483.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Thus:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 450.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (s arraytype__='S') Tj (>) Tj (1,2,3) Tj (<) Tj (/s) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 430.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Is an array of unsigned 1 byte integers. These typetags correspond to the C++ Val type tags.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 400.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 7.573314 Tw (When building arrays from Python, look at the Numeric typecodes from Numeric \(print) Tj T* 0 Tw (Numeric.typecodes\) or array \(help array\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 370.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.203984 Tw (Note that from a Python dictionary perspective, the arrays are usually printed as Numeric arrays. Their) Tj T* 0 Tw (typecodes:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 313.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 582 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import Numeric) Tj T* (>) Tj (>) Tj (>) Tj ( print Numeric.typecodes) Tj T* ({'Integer': '1sil', 'UnsignedInteger': 'bwu', 'Float': 'fd', 'Character': 'c', 'Complex': 'FD'}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 233.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .24311 Tw (Why didn't we use Numeric typecodes as the standard for the XML type tags? Unfortunately, the Numeric) Tj T* 0 Tw .482485 Tw (typecodes don't have a 8-byte unsigned integer, and depending on the type of machine \(32-bit or 64-bit\),) Tj T* 0 Tw 2.902485 Tw (the 'l' typecode may be \(resp.\) a 4-byte integer or an 8-byte integer. The Numeric typecodes are) Tj T* 0 Tw .276647 Tw (unfortunately inconsistent. The Python array typecodes have similar problems \(the tags aren't guaranteed) Tj T* 0 Tw 1.99436 Tw (to be a x-bytes, and there are no complex typecodes\). The Val typecodes \(listed above\) are always) Tj T* 0 Tw (guaranteed to be exact number of bytes and they support complex data.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 200.4236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Back and Forth Between XML and Python Dictionaries) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 158.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .352209 Tw (The XMLLoader and XMLDumper have been written in such a way to allow you to convert back and forth) Tj T* 0 Tw 2.054651 Tw (between XML and Python dictionaries and not lose information \(if your XML is key-value XML\). The) Tj T* 0 Tw (previous sections made it look easy, but there are a lot of places where it be tricky.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 152.4236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 75.55748 cm
Q
q
1 0 0 1 20 75.55748 cm
Q
q
1 0 0 1 20 51.55748 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .955697 Tw (lists: Lists can be problematic \(see above discussion\), but the solutions to those problems are) Tj T* 0 Tw (outlined in the previous section.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 45.55748 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 30.55748 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 6.55748 cm
q
BT 1 0 0 1 0 26 Tm 1.363984 Tw 12 TL /F1 10 Tf 0 0 0 rg (floating point numbers: With any floating point data, the number of places you print can be ) Tj T* 0 Tw 1.307126 Tw (important. The 'default' printing of Python is usually not good enough, so the ) Tj /F4 10 Tf (pretty ) Tj /F1 10 Tf (module ) Tj T* 0 Tw 2.728443 Tw (has gone to great lengths \(and the XMLDumper and XMLLoader both import the ) Tj /F4 10 Tf (pretty) Tj T* 0 Tw ET
Q
Q
q
Q
Q
q
Q
Q
 
endstream
endobj
73 0 obj
<< /Length 4689 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 657.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 72 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 23 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .002126 Tw 12 TL /F1 10 Tf 0 0 0 rg (module\) to make sure that floating point numbers are handled responsibly: floats are printed with) Tj T* 0 Tw .20811 Tw (7 places, doubles are printed with 16 places. Both the C++ and Python versions of pretty should) Tj T* 0 Tw (behave exactly the same way.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 30 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.028443 Tw (array disposition: When going back and forth between dictionaries and XML, be judicious with) Tj T* 0 Tw .558651 Tw (the array disposition, or you may lose information. See the previous section for more details on) Tj T* 0 Tw (POD data.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .69748 Tw (dropping the top-level: In XML, the top-level document is frequently irrelevant. Converting back) Tj T* 0 Tw (and forth between XML and dicts you will probably want to drop the top-level.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 657.0236 cm
Q
q
1 0 0 1 62.69291 603.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .25811 Tw (There are two tools for converting between XML and Python dictionaries from the command line: they are) Tj T* 0 Tw .15561 Tw (xml2dict.py and the dict2xml.py \(or in the C++ area, xml2dict and dict2xml: the C++ version is significantly) Tj T* 0 Tw .290542 Tw (faster \(60x\), but will have to be compiled. As usual, the C++ and Python interfaces are exactly the same\).) Tj T* 0 Tw (Sample usage:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 245.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 348 re B*
Q
q
BT 1 0 0 1 0 326 Tm 12 TL /F3 10 Tf 0 0 0 rg (# From a UNIX prompt) Tj T* (% cd /fullpath/to/PicklingTools130/Python) Tj T* (% cat INPUT.XML) Tj T*  T* (<) Tj (?xml version="1.0" encoding="UTF-8"?) Tj (>) Tj  T* (<) Tj (root) Tj (>) Tj  T* (  ) Tj (<) Tj (list__) Tj (>) Tj  T* (    ) Tj (<) Tj (data arraytype__="d") Tj (>) Tj (100.0,200.0) Tj (<) Tj (/data) Tj (>) Tj  T* (    ) Tj (<) Tj (data arraytype__="D") Tj (>) Tj (\(100-100j\),\(600+1j\)) Tj (<) Tj (/data) Tj (>) Tj  T* (    ) Tj (<) Tj (here) Tj (>) Tj (1) Tj (<) Tj (/here) Tj (>) Tj  T* (  ) Tj (<) Tj (/list__) Tj (>) Tj  T* (  ) Tj (<) Tj (list__) Tj (>) Tj (7) Tj (<) Tj (/list__) Tj (>) Tj  T* (  ) Tj (<) Tj (list__) Tj (>) Tj (\(1-2j\)) Tj (<) Tj (/list__) Tj (>) Tj  T* (<) Tj (/root) Tj (>) Tj  T*  T* (% python xml2dict.py INPUT.XML) Tj T*  T* ([) Tj T* (  {) Tj T* (      'data':[) Tj T* (          array\([100.0,200.0], 'd'\),) Tj T* (          array\([\(100-100j\),\(600+1j\)], 'D'\)) Tj T* (      ],) Tj T* (      'here':1) Tj T* (  },) Tj T* (  7,) Tj T* (  \(1-2j\)) Tj T* (]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 213.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.994198 Tw (The options on there were chosen to try to make it easy to go back and forth between the two) Tj T* 0 Tw (representations without losing any info.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 180.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (C++ and the XMLLoader and XMLDumper) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 114.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .60811 Tw (The C++ version is remarkable similar to the Python version: in almost all respects, their behaviors, their) Tj T* 0 Tw .209398 Tw (interfaces, their options, and even their names should be exactly alike. Even though we said this earlier in) Tj T* 0 Tw .796457 Tw (this document, it is worth saying again: there has been considerable effort to make the C++ and Python) Tj T* 0 Tw 2.727045 Tw (versions of the XMLLoader and XMLDumper to be as close to the same as possible \(for ease of) Tj T* 0 Tw (maintenance\). Thus, the Python and C++ should be almost interchangeable.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 96.82362 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The C++ version is significantly faster \(60x\), but the Python will be easier to use.) Tj T* ET
Q
Q
 
endstream
endobj
74 0 obj
<< /Length 5236 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.014651 Tw (Some notable differences: the C++ version deals with Vals instead of Python objects, C++ uses OTabs) Tj T* 0 Tw (instead of OrderedDict.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 723.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Consider the following simple C++ example for XMLDumper:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 473.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 240 re B*
Q
q
BT 1 0 0 1 0 218 Tm 12 TL /F3 10 Tf 0 0 0 rg (// Includes needed) Tj T* (#include ) Tj (<) Tj (iostream) Tj (>) Tj  T* (#include "xmldumper.h") Tj T*  T* (// C++ code) Tj T* (int main\(\)) Tj T* ({) Tj T* (  Val v = Tab\("{'a':1, 'b':2.2, 'c':'three'}"\);) Tj T* (  XMLDumper xd\(std::cout, XML_DUMP_PRETTY | XML_STRICT_HDR\);) Tj T* (  xd.XMLDumpKeyValue\("top", v\);) Tj T* (}) Tj T*  T* (/* Output:) Tj T* (<) Tj (top) Tj (>) Tj  T* (   ) Tj (<) Tj (a) Tj (>) Tj (1) Tj (<) Tj (/a) Tj (>) Tj  T* (   ) Tj (<) Tj (b) Tj (>) Tj (2.2) Tj (<) Tj (/b) Tj (>) Tj  T* (   ) Tj (<) Tj (c) Tj (>) Tj (three) Tj (<) Tj (/c) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj  T* (*/) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 441.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .81186 Tw (Like the XMLDumper of Python, the options are specified the same and the behavior and interfaces are) Tj T* 0 Tw (essentially the same. Instead of using "sys.stdout", we use C++ stream std::cout.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 411.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .340574 Tw (There are multiple examples in the baseline of using this the XMLLoader and XMLDumper: take a look at) Tj T* 0 Tw (xml2dict.cc and dict2xml.cc and the Makefiles to see examples of how to compile and use C++.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 378.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Different Types of Keys Of Dictionaries) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 360.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Most of the discussions above assume the keys of dictionaries are strings. They can be other types:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 354.8236 cm
Q
q
1 0 0 1 62.69291 138.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 210 cm
Q
q
1 0 0 1 20 210 cm
Q
q
1 0 0 1 20 57 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 138 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 138 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (numbers:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 128 Tm  T* ET
q
1 0 0 1 20 30 cm
q
BT 1 0 0 1 0 98 Tm .139036 Tw 12 TL /F1 10 Tf 0 0 0 rg (If a key is an int, it will be converted to a tag with "0" around it. Unfortunately, an XML tag of) Tj T* 0 Tw .100574 Tw (<) Tj (0) Tj (> is not legal. By default, the tools will error out saying that keys with only numbers would) Tj T* 0 Tw 13.28898 Tw (be illegal XML. There are two options which help mitigate this:) Tj T* 0 Tw 5.293294 Tw (XML_TAGS_ACCEPTS_DIGITS and XML_DIGITS_AS_TAGS \(yes, they are closely) Tj T* 0 Tw .866342 Tw (named\). The first option \(XML_TAGS_ACCEPTS_DIGITS\) turns a dict key that starts with) Tj T* 0 Tw .397485 Tw (digits into an _digit. In other words, ) Tj /F3 10 Tf 0 0 0 rg (0 ) Tj /F1 10 Tf 0 0 0 rg (would become ) Tj /F3 10 Tf 0 0 0 rg (_0) Tj /F1 10 Tf 0 0 0 rg (. This gives legal XML, but doesn't) Tj T* 0 Tw .916342 Tw (translate back from XML to dict well. The second option \(XML_DIGITS_AS_TAGS\) allows) Tj T* 0 Tw .226412 Tw ("illegal" XML where ) Tj /F3 10 Tf 0 0 0 rg (0 ) Tj /F1 10 Tf 0 0 0 rg (becomes the tag <) Tj (0) Tj (>) Tj (: on other words, the numberness is preserved,) Tj T* 0 Tw (even though the underlying XML is strictly speaking illegal.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 5.107251 Tw (For conversions between Midas 2k OpalTables and XML, we suggest using the) Tj T* 0 Tw (XML_DIGITS_AS_TAGS conversion.) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 20 51 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 36 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 36 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (tuples and other types:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.642485 Tw (Right now, having a tuple as a key in a dict will cause "undefined" translations. As The) Tj T* 0 Tw .682765 Tw (Python will likely error out, and the C++ will try to convert the tuple to a string with varying) Tj T* 0 Tw (degrees of success.) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 138.8236 cm
Q
q
1 0 0 1 62.69291 120.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In general, we suggest keeping keys as strings to keep the XML translations clean and well-defined.) Tj T* ET
Q
Q
 
endstream
endobj
75 0 obj
<< /Length 6236 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Python C-Extension Module: New In PicklingTools 1.4.1) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 678.0236 cm
q
BT 1 0 0 1 0 50 Tm .538443 Tw 12 TL /F1 10 Tf 0 0 0 rg (The XMLtools for Python \() Tj /F3 10 Tf 0 0 0 rg (xmldumper.py ) Tj /F1 10 Tf 0 0 0 rg (and ) Tj /F3 10 Tf 0 0 0 rg (xmlloader.py) Tj /F1 10 Tf 0 0 0 rg (\) was originally written all in raw Python:) Tj T* 0 Tw 1.622927 Tw (this was on purpose it would be easy to include the Python "as-is" without any special build process:) Tj T* 0 Tw .88311 Tw /F4 10 Tf 0 0 0 rg (import xmldumper ) Tj /F1 10 Tf 0 0 0 rg (and you are ready to go. The C++ routines, however, are significantly faster than the) Tj T* 0 Tw 1.222927 Tw (Python routines \(character based I/O is usually much faster in C/C++ than Python\). Take a look at the) Tj T* 0 Tw (output of ) Tj /F3 10 Tf 0 0 0 rg (xmltimingstest.py) Tj /F1 10 Tf 0 0 0 rg (:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 524.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 846 144 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 122 Tm /F3 10 Tf 12 TL (% python xmltimingschecks.py) Tj T* (Time to create big table 0.00489687919617) Tj T* (Time to deepcopy big table 0.0030460357666) Tj T* (...time to convert PyObject to Val ... 0.00101280212402) Tj T* (...time to convert PyObject to Val and back... 0.00146102905273) Tj T* (Time for Python XMLDumper to dump an XML file 0.0433909893036) Tj T* (Time for C XMLDumper to dump an XML file: 0.00465703010559) Tj T* ( -----------) Tj T* ( *Warning: This version of Python doesn't support ast.literal_eval, so XML_LOAD_EVAL_CONTENT can be an unsafe option in malicious input/XML) Tj T* (Time for Python Loader to load an XML file 0.61283493042) Tj T* (Time for C Ext Loader to load an XML file 0.00649094581604) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 456.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.481098 Tw (From these numbers, it's easy to see that dict to XML C++ conversion routines are about an order of) Tj T* 0 Tw 1.050651 Tw (magnitude faster than their Python equivalents, and the XML to dict C++ conversion routines are about) Tj T* 0 Tw 1.923735 Tw (two orders of magnitude faster than their Python equivalents. Although it is nice to have raw Python) Tj T* 0 Tw .994692 Tw (solution to convert between dicts and XML \(for smaller tables\), for any larger tables, the extra speed of) Tj T* 0 Tw (C++ may be essential.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 426.8236 cm
q
BT 1 0 0 1 0 14 Tm .512651 Tw 12 TL /F1 10 Tf 0 0 0 rg (The guts of the C++ converters are available in the Python C-Extension module ) Tj /F3 10 Tf 0 0 0 rg (pyobjconvert) Tj /F1 10 Tf 0 0 0 rg (, but the) Tj T* 0 Tw (real interface most Python users will use is ) Tj /F3 10 Tf 0 0 0 rg (cxmltools) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 396.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Building the pyobjconvert Python C-Extension Module) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 366.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.525366 Tw (The README describes how to create the pyobjconvert module, which has the XML conversion) Tj T* 0 Tw (wrappers:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 321.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL (CReadXMLFromStream, CReadXMLFromString, CReadXMLFromFile) Tj T* (CWriteXMLToStream, CWriteXMLToString, CWriteXMLToFile) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 289.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .634104 Tw (This C extension module for Python increases the speed of the XML to dict conversion by 60x-100x and) Tj T* 0 Tw (the dict to XML conversion by 6-10x.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 235.6236 cm
q
BT 1 0 0 1 0 38 Tm .337765 Tw 12 TL /F1 10 Tf 0 0 0 rg (The user probably doesn't want to use the pyobjconvert module directly \(as it has a different API than the) Tj T* 0 Tw .37784 Tw (previous xmltools.py\): instead, the user will ) Tj /F4 10 Tf 0 0 0 rg (import cxmltools ) Tj /F1 10 Tf 0 0 0 rg (which brings all the appropriate definitions in) Tj T* 0 Tw 2.283059 Tw (and the interfaces/names are converted to interfaces that are consistent with the xmldumper.py and) Tj T* 0 Tw (xmlloader.py.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 229.6236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 120 cm
Q
q
1 0 0 1 20 108 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (HOW TO BUILD) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 108 cm
Q
q
1 0 0 1 20 102 cm
Q
q
1 0 0 1 20 102 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Check 'setup.py':) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
BT 1 0 0 1 0 26 Tm 9.702706 Tw 12 TL /F1 10 Tf 0 0 0 rg (Make sure it includes the paths to the code in ) Tj /F4 10 Tf 0 0 0 rg (PicklingTools141/C++ ) Tj /F1 10 Tf 0 0 0 rg (and) Tj T* 0 Tw 5.193294 Tw /F4 10 Tf 0 0 0 rg (PicklingTools141/C++/opencontainers1_7_5/include ) Tj /F1 10 Tf 0 0 0 rg (\(of course, the version numbers may) Tj T* 0 Tw (change in later releases\).) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .678555 Tw (By default, this should work, but these are relative paths from the PicklingTools main directory.) Tj T* 0 Tw (You may want to move those directories.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Once you are sure those are correctly set-up, type:) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
 
endstream
endobj
76 0 obj
<< /Length 7083 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 545.6 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 143.4 Tm  T* ET
q
1 0 0 1 23 128.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 416.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (% python setup.py build   # % is the UNIX prompt) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 90.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.557984 Tw (This starts the build process and builds the C extension module for you. You should see) Tj T* 0 Tw (something like this \(and notice that it creates three sub-directories\):) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 2034 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL (creating build) Tj T* (creating build/temp.linux-x86_64-2.4) Tj T* (gcc -pthread -fno-strict-aliasing -DNDEBUG -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fPIC -I../C++ -I../C++/opencontainers_1_7_5/include -I/usr/include/python2.4 -c pyobjconvertmodule.cc -o build/temp.linux-x86_64-2.4/pyobjconvertmodule.o) Tj T* (gcc -pthread -fno-strict-aliasing -DNDEBUG -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fPIC -I../C++ -I../C++/opencontainers_1_7_5/include -I/usr/include/python2.4 -c pyobjconverter.cc -o build/temp.linux-x86_64-2.4/pyobjconverter.o) Tj T* (creating build/lib.linux-x86_64-2.4) Tj T* (c++ -pthread -shared build/temp.linux-x86_64-2.4/pyobjconvertmodule.o build/temp.linux-x86_64-2.4/pyobjconverter.o -o build/lib.linux-x86_64-2.4/pyobjconvertmodule.so) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 20 539.6 cm
Q
q
1 0 0 1 20 470.4 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 54.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 54.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Underneath PythonCExt should be three subdirs with names "something" like below:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 419.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (build) Tj T* (build/temp.linux-x86_64-2.4) Tj T* (build/lib.linux-x86_64-2.4) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 20 470.4 cm
Q
q
1 0 0 1 20 464.4 cm
Q
q
1 0 0 1 20 380.4 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 60 cm
q
BT 1 0 0 1 0 14 Tm 1.329147 Tw 12 TL /F1 10 Tf 0 0 0 rg (Take a look at the ) Tj /F4 10 Tf 0 0 0 rg (build/lib.linux-x86_64-2.4 ) Tj /F1 10 Tf 0 0 0 rg (dir: under there should be a ) Tj /F3 10 Tf 0 0 0 rg (pyobjconvert.so) Tj T* 0 Tw /F1 10 Tf 0 0 0 rg (file. This is the file that contains your library.) Tj T* ET
Q
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .35186 Tw (Note these names aren't likely to be the same on your installation. The 'x86' means the machine) Tj T* 0 Tw .121163 Tw (is a 64-bit installation: yours may be a 32-bit installation and would be 'i686'. The '2-4' means this) Tj T* 0 Tw (is for Python 2.4; you are probably using a newer version of Python like 2.6 or 2.7.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Use the appropriate names for your system.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 380.4 cm
Q
q
1 0 0 1 20 374.4 cm
Q
q
1 0 0 1 20 374.4 cm
Q
q
1 0 0 1 20 269.2 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 90.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 90.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Set your PYTHONPATH so it picks up the .so when you import:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 1062 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F3 10 Tf 0 0 0 rg (% setenv PYTHONPATH "/full/path/to/PicklingTools141/PythonCExt/build/lib.linux-x86_64-2.4") Tj T*  T* (% python) Tj T* (>) Tj (>) Tj (>) Tj ( import pyobjconvert  # without PYTHONPATH, it probably won't find your .so) Tj T* (>) Tj (>) Tj (>) Tj ( dir\(pyobjconvert\)) Tj T* (['CReadFromXMLFile', 'CReadFromXMLStream', 'CReadFromXMLString', 'CWriteToXMLFile', 'CWriteToXMLStream', 'ConvertToVal', '__doc__', '__file__', '__name__', 'deepcopy_via_val']) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 20 263.2 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 230.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 218.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .735251 Tw (Try it out! An easy way to see if it works is to run the xmltimingtools.py script which shows the) Tj T* 0 Tw (relative times of xmldumper vs. C XMLDumper, etc:) Tj T* ET
Q
Q
q
1 0 0 1 23 65 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 846 144 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 122 Tm /F3 10 Tf 12 TL (% python xmltimingschecks.py) Tj T* (Time to create big table 0.00489687919617) Tj T* (Time to deepcopy big table 0.0030460357666) Tj T* (...time to convert PyObject to Val ... 0.00101280212402) Tj T* (...time to convert PyObject to Val and back... 0.00146102905273) Tj T* (Time for Python XMLDumper to dump an XML file 0.0433909893036) Tj T* (Time for C XMLDumper to dump an XML file: 0.00465703010559) Tj T* ( -----------) Tj T* ( *Warning: This version of Python doesn't support ast.literal_eval, so XML_LOAD_EVAL_CONTENT can be an unsafe option in malicious input/XML) Tj T* (Time for Python Loader to load an XML file 0.61283493042) Tj T* (Time for C Ext Loader to load an XML file 0.00649094581604) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.07811 Tw (Note the C XMLDumper is about 10x faster than the Python version and the C XMLLoader is) Tj T* 0 Tw (about 100x faster than the Python version) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.985529 Tw 12 TL /F1 10 Tf 0 0 0 rg (Surprisingly, converting from PyObject-) Tj (>) Tj (Val-) Tj (>) Tj (PyObject \(which accomplishes a deep copy\) is) Tj T* 0 Tw (faster than the Python deepcopy \(!\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (To use the C version of the XML tools, try using ) Tj /F3 10 Tf 0 0 0 rg (cxmltools) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
 
endstream
endobj
77 0 obj
<< /Length 4468 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 465.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 286.2 Tm  T* ET
q
1 0 0 1 23 272.2 cm
q
BT 1 0 0 1 0 14 Tm .135366 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (cxmltools ) Tj /F1 10 Tf 0 0 0 rg (requires the 'PicklingTools141/Python' to be on the Python path along with the) Tj T* 0 Tw (extension module:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 438 228 re B*
Q
q
BT 1 0 0 1 0 206 Tm 12 TL /F3 10 Tf 0 0 0 rg (% setenv PYTHONPATH "${PYTHONPATH}:/full/path/PicklingTools141/Python") Tj T* (% python) Tj T* (>) Tj (>) Tj (>) Tj ( from cxmltools import *   # make sure cxmltools.py is on PYTHONPATH) Tj T* (...                           # as is) Tj T*  T* (>) Tj (>) Tj (>) Tj ( d = {'a':1, 'b':2 }) Tj T* (>) Tj (>) Tj (>) Tj  T* (>) Tj (>) Tj (>) Tj ( a = WriteToXMLFile\(d, 'top'\)   # Don't forget the "top") Tj T* (>) Tj (>) Tj (>) Tj ( print a) Tj T* (<) Tj (?xml version="1.0" encoding="UTF-8"?) Tj (>) Tj  T* (<) Tj (top) Tj (>) Tj  T* (  ) Tj (<) Tj (a) Tj (>) Tj (1) Tj (<) Tj (/a) Tj (>) Tj  T* (  ) Tj (<) Tj (b) Tj (>) Tj (2) Tj (<) Tj (/b) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj  T*  T* (>) Tj (>) Tj (>) Tj ( res = ReadFromXMLString\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( print res) Tj T* ({'a': 1, 'b': 2}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.617318 Tw 12 TL /F1 10 Tf 0 0 0 rg (In case the ) Tj /F3 10 Tf 0 0 0 rg (cxmltools ) Tj /F1 10 Tf 0 0 0 rg (aren't built, you can ) Tj /F4 10 Tf 0 0 0 rg (import xmltools ) Tj /F1 10 Tf 0 0 0 rg (and get the same behavior as) Tj T* 0 Tw (above, just not as fast!) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 465.8236 cm
Q
q
1 0 0 1 62.69291 411.8236 cm
q
BT 1 0 0 1 0 38 Tm 1.974651 Tw 12 TL /F1 10 Tf 0 0 0 rg (Note that the ) Tj /F3 10 Tf 0 0 0 rg (cxmltools ) Tj /F1 10 Tf 0 0 0 rg (does NOT have everything the ) Tj /F3 10 Tf 0 0 0 rg (xmltools ) Tj /F1 10 Tf 0 0 0 rg (has: it only has the simplified) Tj T* 0 Tw .919982 Tw (wrappers \(listed below\). These are the same simplified wrappers that the xmldumper/xmlloader have as) Tj T* 0 Tw .477126 Tw (well. Really, the only thing you ) Tj /F4 10 Tf (don't ) Tj /F1 10 Tf (have are the classes \(XMLDumper/XMLLoader\) that implements the) Tj T* 0 Tw (conversions: all the functionality is still available, but through the easier-to-use wrappers.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 393.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For converting from XML to dict, the simplified wrappers are:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 276.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 474 108 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F3 10 Tf 12 TL (ReadFromXMLFile\(filename, options, array_disp, prepend_char\);) Tj T* (ReadFromXMLStream\(stream, options, array_disp, prepend_char\);) Tj T* (ReadXMLString\(xml_string, options, array_disp, prepend_char\);) Tj T*  T* (defaults:) Tj T* (     options=XML_STRICT_HDR | XML_LOAD_DROP_TOP_LEVEL | XML_LOAD_EVAL_CONTENT) Tj T* (     array_disp=AS_NUMERIC) Tj T* (     prepend_char=XML_PREPEND_CHAR) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 256.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For converting from dict to XML, the simplified wrappers are:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 91.42362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 156 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 134 Tm /F3 10 Tf 12 TL (WriteToXMLFile\(dict_to_convert, filename, top_level_key, options,) Tj T* (               array_disp, prepend_char\)) Tj T* (WriteToXMLStream\(dict_to_convert, stream, top_level_key, options,) Tj T* (                 array_disp, prepend_char\)) Tj T* (WriteToXMLString\(dict_to_convert, top_level_key, options,) Tj T* (                 array_disp, prepend_char\)) Tj T*  T* (defaults:) Tj T* (     top_level_key=None   \(this should probably always be "top" instead\)) Tj T* (     options=XML_DUMP_PRETTY | XML_STRICT_HDR | XML_DUMP_STRINGS_BEST_GUESS) Tj T* (     array_disp=AS_NUMERIC) Tj T* (     prepend_char=XML_PREPEND_CHAR) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
78 0 obj
<< /Length 6123 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
BT 1 0 0 1 0 14 Tm 1.512706 Tw 12 TL /F1 10 Tf 0 0 0 rg (Note that the ) Tj /F3 10 Tf 0 0 0 rg (WriteToXMLString ) Tj /F1 10 Tf 0 0 0 rg (returns the string of interest, whereas the WriteToXMLFile/Stream) Tj T* 0 Tw (instead both write to the given entity \(and return None\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 708.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Conclusion) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 666.0236 cm
q
BT 1 0 0 1 0 26 Tm .499984 Tw 12 TL /F1 10 Tf 0 0 0 rg (There are two sets of Python conversion routines: ) Tj /F4 10 Tf 0 0 0 rg (xmltools.py ) Tj /F1 10 Tf 0 0 0 rg (and ) Tj /F4 10 Tf 0 0 0 rg (cxmltools.py) Tj /F1 10 Tf 0 0 0 rg (. The former allows a raw) Tj T* 0 Tw 2.55061 Tw (Python solution so you can get going immediately. The latter requires more work to build and use) Tj T* 0 Tw (correctly, but gives routines that are significantly faster.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 624.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.02311 Tw (The XML Tools described herein have a particular job: allow dictionaries and XML to be used relatively) Tj T* 0 Tw .237126 Tw (interchangeably. When there is not a clear translation, it's probably worth stepping back and re-evaluating) Tj T* 0 Tw (if XML or dict is the better solution. Some of the questionable conversions:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 618.0236 cm
Q
q
1 0 0 1 62.69291 558.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 54 cm
Q
q
1 0 0 1 20 54 cm
Q
q
1 0 0 1 20 30 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.392651 Tw (Does the XML have content and tags freely interspersed? These don't map well to dicts and) Tj T* 0 Tw (maybe the user is using the "document" part of XML heavily.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .479398 Tw (Do dicts have complex keys \(like tuples\)? These don't map well to XML, and the user is maybe) Tj T* 0 Tw (relying on the complex nature of dicts within Python.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 558.0236 cm
Q
q
1 0 0 1 62.69291 516.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 3.022339 Tw (If, on the other hand, your XML or dicts are used strictly for key-value type relationships \(with a) Tj T* 0 Tw .090651 Tw (straight-forward use of attributes in XML\), then these conversions make sense and may solve the problem) Tj T* 0 Tw (for you. These tools have been written with a particular usage in mind and hopefully fit your bill.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 483.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Appendix A:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 465.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (What features of XML we support:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 459.0236 cm
Q
q
1 0 0 1 62.69291 279.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 174 cm
Q
q
1 0 0 1 20 174 cm
Q
q
1 0 0 1 20 162 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (hex escape sequences: Sequences such as &) Tj (#x2A; are supported as of 1.3.1) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 156 cm
Q
q
1 0 0 1 20 120 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .144987 Tw 12 TL /F1 10 Tf 0 0 0 rg (DTDs: Usually, a DTD has a <) Tj (!SOMETHING ... > format: we don't enforce or use the DTD at all,) Tj T* 0 Tw .393984 Tw (but it can be read---it is simply ignored. 1.3.0 couldn't recognize DTDs and 1.3.1 recognizes but) Tj T* 0 Tw (ignores them.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 114 cm
Q
q
1 0 0 1 20 78 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .47152 Tw (namespaces: Neither 1.3.0 nor 1.3.1 recognize namespaces. 1.3.1 can at least parse XML with) Tj T* 0 Tw .03561 Tw (namespaces \(by recognizing the : in names\), but there is no support beyond that. A later release) Tj T* 0 Tw (will embrace namespaces fully.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 72 cm
Q
q
1 0 0 1 20 48 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .161412 Tw (comments: XML comments can be interspersed in more places: they reduce to nothing. A future) Tj T* 0 Tw (release may try to preserve the comment in a Python #) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 30 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (version: only 1.0) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .137318 Tw (encoding: BUG: We specify UTF-8, but currently only works with ASCII. This won't be a problem) Tj T* 0 Tw (unless you use any non-ASCII chars.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 279.0236 cm
Q
 
endstream
endobj
79 0 obj
<< /Nums [ 0 80 0 R 1 81 0 R 2 82 0 R 3 83 0 R 4 84 0 R 
  5 85 0 R 6 86 0 R 7 87 0 R 8 88 0 R 9 89 0 R 
  10 90 0 R 11 91 0 R 12 92 0 R 13 93 0 R 14 94 0 R 
  15 95 0 R 16 96 0 R 17 97 0 R 18 98 0 R 19 99 0 R 
  20 100 0 R 21 101 0 R 22 102 0 R 23 103 0 R 24 104 0 R 
  25 105 0 R ] >>
endobj
80 0 obj
<< /S /D /St 1 >>
endobj
81 0 obj
<< /S /D /St 2 >>
endobj
82 0 obj
<< /S /D /St 3 >>
endobj
83 0 obj
<< /S /D /St 4 >>
endobj
84 0 obj
<< /S /D /St 5 >>
endobj
85 0 obj
<< /S /D /St 6 >>
endobj
86 0 obj
<< /S /D /St 7 >>
endobj
87 0 obj
<< /S /D /St 8 >>
endobj
88 0 obj
<< /S /D /St 9 >>
endobj
89 0 obj
<< /S /D /St 10 >>
endobj
90 0 obj
<< /S /D /St 11 >>
endobj
91 0 obj
<< /S /D /St 12 >>
endobj
92 0 obj
<< /S /D /St 13 >>
endobj
93 0 obj
<< /S /D /St 14 >>
endobj
94 0 obj
<< /S /D /St 15 >>
endobj
95 0 obj
<< /S /D /St 16 >>
endobj
96 0 obj
<< /S /D /St 17 >>
endobj
97 0 obj
<< /S /D /St 18 >>
endobj
98 0 obj
<< /S /D /St 19 >>
endobj
99 0 obj
<< /S /D /St 20 >>
endobj
100 0 obj
<< /S /D /St 21 >>
endobj
101 0 obj
<< /S /D /St 22 >>
endobj
102 0 obj
<< /S /D /St 23 >>
endobj
103 0 obj
<< /S /D /St 24 >>
endobj
104 0 obj
<< /S /D /St 25 >>
endobj
105 0 obj
<< /S /D /St 26 >>
endobj
xref
0 106
0000000000 65535 f
0000000075 00000 n
0000000139 00000 n
0000000249 00000 n
0000000364 00000 n
0000000472 00000 n
0000000590 00000 n
0000000799 00000 n
0000001008 00000 n
0000001217 00000 n
0000001426 00000 n
0000001636 00000 n
0000001846 00000 n
0000002056 00000 n
0000002266 00000 n
0000002476 00000 n
0000002686 00000 n
0000002896 00000 n
0000003106 00000 n
0000003316 00000 n
0000003526 00000 n
0000003736 00000 n
0000003946 00000 n
0000004156 00000 n
0000004366 00000 n
0000004576 00000 n
0000004786 00000 n
0000004996 00000 n
0000005206 00000 n
0000005416 00000 n
0000005626 00000 n
0000005836 00000 n
0000006046 00000 n
0000006155 00000 n
0000006399 00000 n
0000006477 00000 n
0000006620 00000 n
0000006767 00000 n
0000006916 00000 n
0000007080 00000 n
0000007220 00000 n
0000007360 00000 n
0000007502 00000 n
0000007648 00000 n
0000007799 00000 n
0000007934 00000 n
0000008102 00000 n
0000008255 00000 n
0000008412 00000 n
0000008623 00000 n
0000008766 00000 n
0000008894 00000 n
0000009010 00000 n
0000009254 00000 n
0000014862 00000 n
0000019518 00000 n
0000025589 00000 n
0000031165 00000 n
0000036376 00000 n
0000040647 00000 n
0000043917 00000 n
0000048511 00000 n
0000054334 00000 n
0000058347 00000 n
0000062241 00000 n
0000065242 00000 n
0000069746 00000 n
0000075765 00000 n
0000080478 00000 n
0000084989 00000 n
0000091822 00000 n
0000097207 00000 n
0000103115 00000 n
0000109404 00000 n
0000114150 00000 n
0000119443 00000 n
0000125736 00000 n
0000132876 00000 n
0000137401 00000 n
0000143581 00000 n
0000143892 00000 n
0000143929 00000 n
0000143966 00000 n
0000144003 00000 n
0000144040 00000 n
0000144077 00000 n
0000144114 00000 n
0000144151 00000 n
0000144188 00000 n
0000144225 00000 n
0000144263 00000 n
0000144301 00000 n
0000144339 00000 n
0000144377 00000 n
0000144415 00000 n
0000144453 00000 n
0000144491 00000 n
0000144529 00000 n
0000144567 00000 n
0000144605 00000 n
0000144643 00000 n
0000144682 00000 n
0000144721 00000 n
0000144760 00000 n
0000144799 00000 n
0000144838 00000 n
trailer
<< /ID 
 % ReportLab generated PDF document -- digest (http://www.reportlab.com)
 [(\253\202\2579\271\204\370\230\307\244\227i\014\004\006\351) (\253\202\2579\271\204\370\230\307\244\227i\014\004\006\351)]
 /Info 33 0 R /Root 32 0 R /Size 106 >>
startxref
144877
%%EOF
